{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to the documentation for MFractor, a powerful productivity tool for Visual Studio Windows and Mac to streamline the development of Xamarin applications. Under construction \ud83d\udd28 We are currently rebuilding our documentation site to prepare for the release of MFractor for Windows. Installation and Setup Please see Installation And Setup Help And Support Please see Support Getting Started Coming soon Release Notes MFractors release notes can be found at: Visual Studio Mac Visual Studio Windows","title":"Home"},{"location":"#welcome","text":"Welcome to the documentation for MFractor, a powerful productivity tool for Visual Studio Windows and Mac to streamline the development of Xamarin applications. Under construction \ud83d\udd28 We are currently rebuilding our documentation site to prepare for the release of MFractor for Windows.","title":"Welcome"},{"location":"#installation-and-setup","text":"Please see Installation And Setup","title":"Installation and Setup"},{"location":"#help-and-support","text":"Please see Support","title":"Help And Support"},{"location":"#getting-started","text":"Coming soon","title":"Getting Started"},{"location":"#release-notes","text":"MFractors release notes can be found at: Visual Studio Mac Visual Studio Windows","title":"Release Notes"},{"location":"faq/","text":"Answers to some commonly asked questions What is MFractor Professional? MFractor Professional is our paid version of MFractor. Our terms: A Professional license if valid for one developer only. Please purchase a license for each developer in your team. Licenses valid for 366 days from the date of purchase. A single license can be used on up to 3 developer machines. As cross-platform developers it is very likely we have a Windows machine, a Mac and a personal machine. What is MFractor Lite? MFractor Lite is our free-for-use version of MFractor that includes our full XAML feature suite for 4 XAML files per day. MFractor Lite: Does not allow usage of our C# features. Does not allow usage of our asset management features. Does not allow usage of our code generation wizards. Is not available for MFractor for Visual Studio Windows. How do I get a refund? Please email matthew@mfractor.com and request a refund within 30 days of purchase. We are sad to see your go! \ud83d\ude2d Do you offer company licenses? Yes! We can issue your company a license for any number of seats. To get a company license, please purchase your license at www.mfractor.com/buy . Alternatively, please email matthew@mfractor.com requesting an invoice for purchasing. I require an invoice or quote to purchase MFractor, can you provide one? Yes, we offer payment and purchasing of MFractor licenses through invoice (fulfilled via Paypal payments). We can also provide quotes on the cost of an MFractor License purchase should you require one for your purchase order. How do I report a bug? To report a bug, please file an issue on our GitHub issues tracker at https://github.com/mfractor/mfractor-feedback/issues Please see our Support documentation for detailed information on reporting a bug. I've got a great feature idea, how do I request it? Fantastic! We'd love to hear it and make it a reality. Firstly, please file an issue on our GitHub issues tracker at https://github.com/mfractor/mfractor-feedback/issues with a brief description of the feature and how it would work. Matthew or Rafael will then get in touch and request a feedback call so that we can flesh out the idea and make it a reality. I'd like to try MFractor Professional, how do I get a trial? To request an MFractor Professional trial, please email matthew@mfractor.com. How do I recover my MFractor Professional license? To recover your MFractor Professional license, please email matthew@mfractor.com requesting your license. Where can I find MFracor's release notes? MFractors release notes can be found here: MFractor for Visual Studio Mac Release Notes MFractor for Visual Studio Windows Release Notes Where do I find the latest version of MFractor? Visual Studio Macs The latest version of MFractor for Visual Studio Mac can be found at: http://addins.monodevelop.com/Project/Index/300 Visual Studio Windows The latest version of MFractor for Visual Studio Windows can be found in the Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=MFractorPtyLtd.MFRACTOR-VS-WINDOWS What version of Visual Studio does MFractor support? Visual Studio Macs MFractor for Visual Studio Mac supports Visual Studio 2019 and higher. We always track the latest stable release. Visual Studio Windows MFractor for Visual Studio Windows supports Visual Studio 2019 and higher. Does MFractor support the Preview versions of Visual Studio? No, we do not officially support the preview versions of Visual Studio Mac or Windows. The extension may work if installed from file, however, we do not officially target or support any form of the Visual Studio previews. MFractor is not visible in Visual Studio Macs Extension Manager. MFractor is usually found in the Gallery tab of the Extension Manager under IDE Extensions ; you can use the top right search bar to locate If you are unable to see MFractor in the Extension Manager, firstly, please check that you are on the stable channel of Visual Studio Mac. If you are on the stable channel and are unable to locate MFractor, please download a suitable release from the Extensions Site and then install from file ; I'd like to write a blog about MFractor. Great! We love people blogging about our product and sharing the love. Please email matthew@mfractor.com and we will set you up with: A 30-day trial license to explore the software. A call to run you through the software. Logos and design assets for MFractor's branding. What is the .mfractor folder? The .mfractor folder is MFractors working directory for your solution. This directory contains several SQLite database that are generated when MFractor indexes your projects. These databases are essential for many of MFractors features and are constantly regenerated. It is safe to delete whenever you want however some features won't work correctly without it. Should I check .mfractor into source control? No, you should not check the .mfractor folder into source control. If you are using git, append the following text to the end of your .gitignore to exclude .mfractor : *.mfractor/ The VisualStudio .gitignore that is available on www.github.com ignores the .mfractor folder by default. Can you help me make a Visual Studio extension? Sure thing, we are happy to help the community get started creating Visual Studio extensions for both Mac and Windows. Please email matthew@mfractor.com requesting assistance and he'll get in touch to organise a call. Are you available for hire to develop Xamarin applications? Yes we are. As tools developers, we are very skilled at building Xamarin applications. Please make a services enquiry to Matthew Robbins at matthew@mfractor. If we are unable to develop your app, we have a network trusted development partners in the United States, Europe, Australia and Singapore who can also develop your app that we will put you in touch with. Are you available for hire to develop Visual Studio extension? Yes we are. Please make a services enquiry to Matthew Robbins at matthew@mfractor. What is the licensing agreement? Please see our End User License . What is your privacy policy? Please see our Privacy Policy .","title":"FAQ"},{"location":"faq/#what-is-mfractor-professional","text":"MFractor Professional is our paid version of MFractor. Our terms: A Professional license if valid for one developer only. Please purchase a license for each developer in your team. Licenses valid for 366 days from the date of purchase. A single license can be used on up to 3 developer machines. As cross-platform developers it is very likely we have a Windows machine, a Mac and a personal machine.","title":"What is MFractor Professional?"},{"location":"faq/#what-is-mfractor-lite","text":"MFractor Lite is our free-for-use version of MFractor that includes our full XAML feature suite for 4 XAML files per day. MFractor Lite: Does not allow usage of our C# features. Does not allow usage of our asset management features. Does not allow usage of our code generation wizards. Is not available for MFractor for Visual Studio Windows.","title":"What is MFractor Lite?"},{"location":"faq/#how-do-i-get-a-refund","text":"Please email matthew@mfractor.com and request a refund within 30 days of purchase. We are sad to see your go! \ud83d\ude2d","title":"How do I get a refund?"},{"location":"faq/#do-you-offer-company-licenses","text":"Yes! We can issue your company a license for any number of seats. To get a company license, please purchase your license at www.mfractor.com/buy . Alternatively, please email matthew@mfractor.com requesting an invoice for purchasing.","title":"Do you offer company licenses?"},{"location":"faq/#i-require-an-invoice-or-quote-to-purchase-mfractor-can-you-provide-one","text":"Yes, we offer payment and purchasing of MFractor licenses through invoice (fulfilled via Paypal payments). We can also provide quotes on the cost of an MFractor License purchase should you require one for your purchase order.","title":"I require an invoice or quote to purchase MFractor, can you provide one?"},{"location":"faq/#how-do-i-report-a-bug","text":"To report a bug, please file an issue on our GitHub issues tracker at https://github.com/mfractor/mfractor-feedback/issues Please see our Support documentation for detailed information on reporting a bug.","title":"How do I report a bug?"},{"location":"faq/#ive-got-a-great-feature-idea-how-do-i-request-it","text":"Fantastic! We'd love to hear it and make it a reality. Firstly, please file an issue on our GitHub issues tracker at https://github.com/mfractor/mfractor-feedback/issues with a brief description of the feature and how it would work. Matthew or Rafael will then get in touch and request a feedback call so that we can flesh out the idea and make it a reality.","title":"I've got a great feature idea, how do I request it?"},{"location":"faq/#id-like-to-try-mfractor-professional-how-do-i-get-a-trial","text":"To request an MFractor Professional trial, please email matthew@mfractor.com.","title":"I'd like to try MFractor Professional, how do I get a trial?"},{"location":"faq/#how-do-i-recover-my-mfractor-professional-license","text":"To recover your MFractor Professional license, please email matthew@mfractor.com requesting your license.","title":"How do I recover my MFractor Professional license?"},{"location":"faq/#where-can-i-find-mfracors-release-notes","text":"MFractors release notes can be found here: MFractor for Visual Studio Mac Release Notes MFractor for Visual Studio Windows Release Notes","title":"Where can I find MFracor's release notes?"},{"location":"faq/#where-do-i-find-the-latest-version-of-mfractor","text":"","title":"Where do I find the latest version of MFractor?"},{"location":"faq/#visual-studio-macs","text":"The latest version of MFractor for Visual Studio Mac can be found at: http://addins.monodevelop.com/Project/Index/300","title":"Visual Studio Macs"},{"location":"faq/#visual-studio-windows","text":"The latest version of MFractor for Visual Studio Windows can be found in the Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=MFractorPtyLtd.MFRACTOR-VS-WINDOWS","title":"Visual Studio Windows"},{"location":"faq/#what-version-of-visual-studio-does-mfractor-support","text":"","title":"What version of Visual Studio does MFractor support?"},{"location":"faq/#visual-studio-macs_1","text":"MFractor for Visual Studio Mac supports Visual Studio 2019 and higher. We always track the latest stable release.","title":"Visual Studio Macs"},{"location":"faq/#visual-studio-windows_1","text":"MFractor for Visual Studio Windows supports Visual Studio 2019 and higher.","title":"Visual Studio Windows"},{"location":"faq/#does-mfractor-support-the-preview-versions-of-visual-studio","text":"No, we do not officially support the preview versions of Visual Studio Mac or Windows. The extension may work if installed from file, however, we do not officially target or support any form of the Visual Studio previews.","title":"Does MFractor support the Preview versions of Visual Studio?"},{"location":"faq/#mfractor-is-not-visible-in-visual-studio-macs-extension-manager","text":"MFractor is usually found in the Gallery tab of the Extension Manager under IDE Extensions ; you can use the top right search bar to locate If you are unable to see MFractor in the Extension Manager, firstly, please check that you are on the stable channel of Visual Studio Mac. If you are on the stable channel and are unable to locate MFractor, please download a suitable release from the Extensions Site and then install from file ;","title":"MFractor is not visible in Visual Studio Macs Extension Manager."},{"location":"faq/#id-like-to-write-a-blog-about-mfractor","text":"Great! We love people blogging about our product and sharing the love. Please email matthew@mfractor.com and we will set you up with: A 30-day trial license to explore the software. A call to run you through the software. Logos and design assets for MFractor's branding.","title":"I'd like to write a blog about MFractor."},{"location":"faq/#what-is-the-mfractor-folder","text":"The .mfractor folder is MFractors working directory for your solution. This directory contains several SQLite database that are generated when MFractor indexes your projects. These databases are essential for many of MFractors features and are constantly regenerated. It is safe to delete whenever you want however some features won't work correctly without it.","title":"What is the .mfractor folder?"},{"location":"faq/#should-i-check-mfractor-into-source-control","text":"No, you should not check the .mfractor folder into source control. If you are using git, append the following text to the end of your .gitignore to exclude .mfractor : *.mfractor/ The VisualStudio .gitignore that is available on www.github.com ignores the .mfractor folder by default.","title":"Should I check .mfractor into source control?"},{"location":"faq/#can-you-help-me-make-a-visual-studio-extension","text":"Sure thing, we are happy to help the community get started creating Visual Studio extensions for both Mac and Windows. Please email matthew@mfractor.com requesting assistance and he'll get in touch to organise a call.","title":"Can you help me make a Visual Studio extension?"},{"location":"faq/#are-you-available-for-hire-to-develop-xamarin-applications","text":"Yes we are. As tools developers, we are very skilled at building Xamarin applications. Please make a services enquiry to Matthew Robbins at matthew@mfractor. If we are unable to develop your app, we have a network trusted development partners in the United States, Europe, Australia and Singapore who can also develop your app that we will put you in touch with.","title":"Are you available for hire to develop Xamarin applications?"},{"location":"faq/#are-you-available-for-hire-to-develop-visual-studio-extension","text":"Yes we are. Please make a services enquiry to Matthew Robbins at matthew@mfractor.","title":"Are you available for hire to develop Visual Studio extension?"},{"location":"faq/#what-is-the-licensing-agreement","text":"Please see our End User License .","title":"What is the licensing agreement?"},{"location":"faq/#what-is-your-privacy-policy","text":"Please see our Privacy Policy .","title":"What is your privacy policy?"},{"location":"installation-and-setup/","text":"Installing, activating and updating MFractor. Install MFractor Visual Studio Mac To install MFractor, start Visual Studio for Mac. Next, navigate to the top Visual Studio menu item and select Extensions . Next, click on the Gallery tab and under IDE Extensions choose MFractor. Visual Studio Windows To install Install MFractor from file Visual Studio Mac Visual Studio Mac extensions are bundled and distributed as .mpack files. To install MFractor from file, start Visual Studio for Mac. Next, navigate to the top Visual Studio menu item and select Extensions . In the Extension Manager, Visual Studio Windows Visual Studio Windows extensions are bundled and distributed as .vsix files. To Activating MFractor Visual Studio Mac When you first install MFractor, the activation dialog will open shortly after installation. In the activation dialog, enter your email and name and then click Activate . Download and locate your license file (which ends with the extension .lic). When purchasing MFractor Professional, this license file will be provided in an email. In this example, our license file is located on our desktop called license.lic. Open Visual Studio for Mac. If you have not activated MFractor with an email address, close the activation window. In the main Visual Studio for Mac menu bar, select MFractor and then Licensing. This will open the licensing window where you can import or remove an MFractor Professional license. Next, click on the Import License button, browse to the license file (license.lic) and double click it to import the license into MFractor. It is safe to delete the license file from its original location. MFractor stores the license inside itself. The licensing window will list: Licensed To - The full name of the person that the MFractor Professional license is issued to. License Email: - The email that this MFractor Professional license is issued against. License Type and Expiry Date - The type of license issued (Professional, Trial or Lite) and when that license expires. Visual Studio Windows Open Visual Studio In the activation dialog, enter your email and name and then click Activate . Download and locate your license file (which ends with the extension .lic). When purchasing MFractor Professional, this license file will be provided in an email. In this example, our license file is located on our desktop called license.lic. Open Visual Studio for Mac. If you have not activated MFractor with an email address, close the activation window. In the main Visual Studio for Mac menu bar, select MFractor and then Licensing. This will open the licensing window where you can import or remove an MFractor Professional license. Next, click on the Import License button, browse to the license file (license.lic) and double click it to import the license into MFractor. It is safe to delete the license file from its original location. MFractor stores the license inside itself. The licensing window will list: Licensed To - The full name of the person that the MFractor Professional license is issued to. License Email: - The email that this MFractor Professional license is issued against. License Type and Expiry Date - The type of license issued (Professional, Trial or Lite) and when that license expires. Deactivating Your Professional License If you'd like to remove a license from MFractor, you can open the MFractor license information window and click Remove License. This is a destructive operation, you cannot undo removing a license but you can re-import a new license. After removing a license, you will be automatically downgraded to a free MFractor license. This allows usage of most features apart from C# code actions, mobile-specific C# code diagnostics, and configuration file support. If you are using MFractor for Visual Studio Windows, you will be unable to use any MFractor features. Updating MFractor Visual Studio Mac MFractor will periodically notify you when an update is available. You can also check for updates at any time by opening the Visual Studio Mac main menu and selecting Check for Updates... Visual Studio Mac will check the MFractor extension server for updates and prompt you to update if there is a new version. Visual Studio Windows Coming soon Uninstall MFractor Visual Studio Mac MFractor for Visual Studio Mac can be uninstalled using the Extension Manager . To uninstall, Select the Visual Studio Mac main menu item and then click on Extensions... . Under the Gallery tab, locate the IDE extensions category and expand it. Next, select the MFractor item from the extensions list and then click Uninstall . You will be prompted to uninstall the extension, confirm uninstallation by clicking Uninstall . Finally, restart Visual Studio Mac to complete the uninstallation of MFractor. Visual Studio Windows MFractor for Visual Studio Windows can be uninstalled using Visual Studio Macs Extension Manager . To uninstall, select the Extension main menu item and then click on Manage Extensions . Under the Installed tab, select MFractor . To quickly locate the MFractor extension, type MFractor enter the search bar in the extension managers search bar. After selecting MFractor , click on Uninstall . This will schedule MFractor to be uninstalled. Next close Visual Studio Windows and then Finally, restart Visual Studio Mac to complete the uninstallation of MFractor.","title":"Installation And Setup"},{"location":"installation-and-setup/#install-mfractor","text":"","title":"Install MFractor"},{"location":"installation-and-setup/#visual-studio-mac","text":"To install MFractor, start Visual Studio for Mac. Next, navigate to the top Visual Studio menu item and select Extensions . Next, click on the Gallery tab and under IDE Extensions choose MFractor.","title":"Visual Studio Mac"},{"location":"installation-and-setup/#visual-studio-windows","text":"To install","title":"Visual Studio Windows"},{"location":"installation-and-setup/#install-mfractor-from-file","text":"","title":"Install MFractor from file"},{"location":"installation-and-setup/#visual-studio-mac_1","text":"Visual Studio Mac extensions are bundled and distributed as .mpack files. To install MFractor from file, start Visual Studio for Mac. Next, navigate to the top Visual Studio menu item and select Extensions . In the Extension Manager,","title":"Visual Studio Mac"},{"location":"installation-and-setup/#visual-studio-windows_1","text":"Visual Studio Windows extensions are bundled and distributed as .vsix files. To","title":"Visual Studio Windows"},{"location":"installation-and-setup/#activating-mfractor","text":"","title":"Activating MFractor"},{"location":"installation-and-setup/#visual-studio-mac_2","text":"When you first install MFractor, the activation dialog will open shortly after installation. In the activation dialog, enter your email and name and then click Activate . Download and locate your license file (which ends with the extension .lic). When purchasing MFractor Professional, this license file will be provided in an email. In this example, our license file is located on our desktop called license.lic. Open Visual Studio for Mac. If you have not activated MFractor with an email address, close the activation window. In the main Visual Studio for Mac menu bar, select MFractor and then Licensing. This will open the licensing window where you can import or remove an MFractor Professional license. Next, click on the Import License button, browse to the license file (license.lic) and double click it to import the license into MFractor. It is safe to delete the license file from its original location. MFractor stores the license inside itself. The licensing window will list: Licensed To - The full name of the person that the MFractor Professional license is issued to. License Email: - The email that this MFractor Professional license is issued against. License Type and Expiry Date - The type of license issued (Professional, Trial or Lite) and when that license expires.","title":"Visual Studio Mac"},{"location":"installation-and-setup/#visual-studio-windows_2","text":"Open Visual Studio In the activation dialog, enter your email and name and then click Activate . Download and locate your license file (which ends with the extension .lic). When purchasing MFractor Professional, this license file will be provided in an email. In this example, our license file is located on our desktop called license.lic. Open Visual Studio for Mac. If you have not activated MFractor with an email address, close the activation window. In the main Visual Studio for Mac menu bar, select MFractor and then Licensing. This will open the licensing window where you can import or remove an MFractor Professional license. Next, click on the Import License button, browse to the license file (license.lic) and double click it to import the license into MFractor. It is safe to delete the license file from its original location. MFractor stores the license inside itself. The licensing window will list: Licensed To - The full name of the person that the MFractor Professional license is issued to. License Email: - The email that this MFractor Professional license is issued against. License Type and Expiry Date - The type of license issued (Professional, Trial or Lite) and when that license expires.","title":"Visual Studio Windows"},{"location":"installation-and-setup/#deactivating-your-professional-license","text":"If you'd like to remove a license from MFractor, you can open the MFractor license information window and click Remove License. This is a destructive operation, you cannot undo removing a license but you can re-import a new license. After removing a license, you will be automatically downgraded to a free MFractor license. This allows usage of most features apart from C# code actions, mobile-specific C# code diagnostics, and configuration file support. If you are using MFractor for Visual Studio Windows, you will be unable to use any MFractor features.","title":"Deactivating Your Professional License"},{"location":"installation-and-setup/#updating-mfractor","text":"","title":"Updating MFractor"},{"location":"installation-and-setup/#visual-studio-mac_3","text":"MFractor will periodically notify you when an update is available. You can also check for updates at any time by opening the Visual Studio Mac main menu and selecting Check for Updates... Visual Studio Mac will check the MFractor extension server for updates and prompt you to update if there is a new version.","title":"Visual Studio Mac"},{"location":"installation-and-setup/#visual-studio-windows_3","text":"Coming soon","title":"Visual Studio Windows"},{"location":"installation-and-setup/#uninstall-mfractor","text":"","title":"Uninstall MFractor"},{"location":"installation-and-setup/#visual-studio-mac_4","text":"MFractor for Visual Studio Mac can be uninstalled using the Extension Manager . To uninstall, Select the Visual Studio Mac main menu item and then click on Extensions... . Under the Gallery tab, locate the IDE extensions category and expand it. Next, select the MFractor item from the extensions list and then click Uninstall . You will be prompted to uninstall the extension, confirm uninstallation by clicking Uninstall . Finally, restart Visual Studio Mac to complete the uninstallation of MFractor.","title":"Visual Studio Mac"},{"location":"installation-and-setup/#visual-studio-windows_4","text":"MFractor for Visual Studio Windows can be uninstalled using Visual Studio Macs Extension Manager . To uninstall, select the Extension main menu item and then click on Manage Extensions . Under the Installed tab, select MFractor . To quickly locate the MFractor extension, type MFractor enter the search bar in the extension managers search bar. After selecting MFractor , click on Uninstall . This will schedule MFractor to be uninstalled. Next close Visual Studio Windows and then Finally, restart Visual Studio Mac to complete the uninstallation of MFractor.","title":"Visual Studio Windows"},{"location":"licensing/","text":"MFractors licensing levels and terms of use MFractor Professional MFractor Professional is our paid version of MFractor that can be purchased at www.mfractor.com/buy . Our terms: A Professional license if valid for one developer only. Please purchase a license for each developer in your team. Licenses valid for 366 days from the date of purchase. A single license can be used on up to 3 developer machines. As cross-platform developers it is very likely we have a Windows machine, a Mac and a personal machine. MFractor Lite MFractor Lite is our free-for-use version of MFractor that includes our full XAML feature suite for 4 XAML files per day. MFractor Lite: Does not allow usage of our C# features. Does not allow usage of our asset management features. Does not allow usage of our code generation wizards. Is not available for MFractor for Visual Studio Windows. End User License Please find our End User License here. Privacy policy Please find our Private Policy here.","title":"Licensing"},{"location":"licensing/#mfractor-professional","text":"MFractor Professional is our paid version of MFractor that can be purchased at www.mfractor.com/buy . Our terms: A Professional license if valid for one developer only. Please purchase a license for each developer in your team. Licenses valid for 366 days from the date of purchase. A single license can be used on up to 3 developer machines. As cross-platform developers it is very likely we have a Windows machine, a Mac and a personal machine.","title":"MFractor Professional"},{"location":"licensing/#mfractor-lite","text":"MFractor Lite is our free-for-use version of MFractor that includes our full XAML feature suite for 4 XAML files per day. MFractor Lite: Does not allow usage of our C# features. Does not allow usage of our asset management features. Does not allow usage of our code generation wizards. Is not available for MFractor for Visual Studio Windows.","title":"MFractor Lite"},{"location":"licensing/#end-user-license","text":"Please find our End User License here.","title":"End User License"},{"location":"licensing/#privacy-policy","text":"Please find our Private Policy here.","title":"Privacy policy"},{"location":"support/","text":"How to get support or report issues for MFractor Reporting a Bug We use GitHub issues to track bug reports and also to track user-requested features. Our issue tracker can be found at: https://github.com/mfractor/mfractor-feedback/ When reporting an issue, please include the following information: To simplify gathering this information, you can use our Submit Feedback menu shortcut. This shortcut will open our issue tracker in your browser and populate the new issue with the version and environment information of your IDE. Visual Studio Mac To report a bug in MFractor for Visual Studio Mac: Go to the top menu bar and click on the MFractor menu item. Under the Help menu, select Submit Feedback . Additionally, attaching the last 5 log files for Visual Studio Mac will help us diagnose the issue. To get the last 5 log files: Go to the top menu bar and click on the Help menu item. Next, select Open Log Directory . When the log directory opens, please select the 5 latest files named Ide.[Date].log . Visual Studio Windows To obtain the log files for Visual Studio Mac: Go to the top menu bar and click on the Extensions menu item. Under Extensions , select MFractor then Help and finally Submit Feedback . Support Channels In addition to our issue tracker, you can also get support through the following channels: Twitter: @matthewrdev or @mfractor . Slack: MFractor Slack Channel . Gitter: MFractor Gitter Channel . Email: Please email matthew@mfractor.com or rafael@mfractor.com . OfficeHours: Please book Matthew Robbins (Founder) at https://officehours.io/people/matthewrdev","title":"Support"},{"location":"support/#reporting-a-bug","text":"We use GitHub issues to track bug reports and also to track user-requested features. Our issue tracker can be found at: https://github.com/mfractor/mfractor-feedback/ When reporting an issue, please include the following information: To simplify gathering this information, you can use our Submit Feedback menu shortcut. This shortcut will open our issue tracker in your browser and populate the new issue with the version and environment information of your IDE.","title":"Reporting a Bug"},{"location":"support/#visual-studio-mac","text":"To report a bug in MFractor for Visual Studio Mac: Go to the top menu bar and click on the MFractor menu item. Under the Help menu, select Submit Feedback . Additionally, attaching the last 5 log files for Visual Studio Mac will help us diagnose the issue. To get the last 5 log files: Go to the top menu bar and click on the Help menu item. Next, select Open Log Directory . When the log directory opens, please select the 5 latest files named Ide.[Date].log .","title":"Visual Studio Mac"},{"location":"support/#visual-studio-windows","text":"To obtain the log files for Visual Studio Mac: Go to the top menu bar and click on the Extensions menu item. Under Extensions , select MFractor then Help and finally Submit Feedback .","title":"Visual Studio Windows"},{"location":"support/#support-channels","text":"In addition to our issue tracker, you can also get support through the following channels: Twitter: @matthewrdev or @mfractor . Slack: MFractor Slack Channel . Gitter: MFractor Gitter Channel . Email: Please email matthew@mfractor.com or rafael@mfractor.com . OfficeHours: Please book Matthew Robbins (Founder) at https://officehours.io/people/matthewrdev","title":"Support Channels"},{"location":"configuration/overview/","text":"","title":"Overview"},{"location":"csharp/generating-interface-implemenations/","text":"","title":"Generating interface implemenations"},{"location":"csharp/localisation/","text":"","title":"Localisation"},{"location":"image-management/deleting-image-assets/","text":"","title":"Deleting image assets"},{"location":"image-management/importing-image-assets/","text":"","title":"Importing image assets"},{"location":"image-management/managing-image-assets/","text":"","title":"Managing image assets"},{"location":"image-management/optimising-image-assets/","text":"","title":"Optimising image assets"},{"location":"image-management/overview/","text":"","title":"Overview"},{"location":"linker/excluding-symbols-from-linker/","text":"Exclude assemblies, classes or members from the Xamarin linker","title":"Excluding symbols from linker"},{"location":"linker/linker-intellisense/","text":"Use linker.xml IntelliSense to exclude assemblies, classes or members from the Xamarin linker","title":"Linker intellisense"},{"location":"mac/faq/","text":"Frequently Asked Questions Answers to some commonly asked questions What version of Visual Studio Mac is MFractor compatible with? The latest version of MFractor always targets the current stable channel version of Visual Studio Mac. Where can I find the latest version of MFractor? Visual Studio Windows TODO: Instructions on finding in the Visual Studio marketplace Visual Studio Mac TODO: Instruction on finding in addins.monodevelop.com When I first open a XAML file in Visual Studio Windows, MFractors IntelliSense and analysis is not immediately available. Is this a bug? No, this is the expected behaviour. Visual Studio asynchronously loads extensions for performance reasons and, as such, MFractor is loaded in the background How do I report a bug? Please follow the instructions in our Reporting Issues documentation. Where do I find the log files for Visual Studio Mac? What is the .mfractor folder? The .mfractor folder is MFractors working directory for your solution. This directory contains several SQLite database that are generated when MFractor indexes your projects. These databases are essential for many of MFractors features and are constantly regenerated. It is safe to delete whenever you want however some features won't work correctly without it. Should I check .mfractor into source control? No, you should not check the .mfractor folder into source control. If you are using git, append the following text to the end of your .gitignore to exclude .mfractor : *.mfractor/ The VisualStudio .gitignore that is available on www.github.com ignores the .mfractor folder by default.","title":"Faq"},{"location":"mac/faq/#frequently-asked-questions","text":"Answers to some commonly asked questions","title":"Frequently Asked Questions"},{"location":"mac/faq/#what-version-of-visual-studio-mac-is-mfractor-compatible-with","text":"The latest version of MFractor always targets the current stable channel version of Visual Studio Mac.","title":"What version of Visual Studio Mac is MFractor compatible with?"},{"location":"mac/faq/#where-can-i-find-the-latest-version-of-mfractor","text":"","title":"Where can I find the latest version of MFractor?"},{"location":"mac/faq/#visual-studio-windows","text":"TODO: Instructions on finding in the Visual Studio marketplace","title":"Visual Studio Windows"},{"location":"mac/faq/#visual-studio-mac","text":"TODO: Instruction on finding in addins.monodevelop.com","title":"Visual Studio Mac"},{"location":"mac/faq/#when-i-first-open-a-xaml-file-in-visual-studio-windows-mfractors-intellisense-and-analysis-is-not-immediately-available-is-this-a-bug","text":"No, this is the expected behaviour. Visual Studio asynchronously loads extensions for performance reasons and, as such, MFractor is loaded in the background","title":"When I first open a XAML file in Visual Studio Windows, MFractors IntelliSense and analysis is not immediately available. Is this a bug?"},{"location":"mac/faq/#how-do-i-report-a-bug","text":"Please follow the instructions in our Reporting Issues documentation.","title":"How do I report a bug?"},{"location":"mac/faq/#where-do-i-find-the-log-files-for-visual-studio-mac","text":"","title":"Where do I find the log files for Visual Studio Mac?"},{"location":"mac/faq/#what-is-the-mfractor-folder","text":"The .mfractor folder is MFractors working directory for your solution. This directory contains several SQLite database that are generated when MFractor indexes your projects. These databases are essential for many of MFractors features and are constantly regenerated. It is safe to delete whenever you want however some features won't work correctly without it.","title":"What is the .mfractor folder?"},{"location":"mac/faq/#should-i-check-mfractor-into-source-control","text":"No, you should not check the .mfractor folder into source control. If you are using git, append the following text to the end of your .gitignore to exclude .mfractor : *.mfractor/ The VisualStudio .gitignore that is available on www.github.com ignores the .mfractor folder by default.","title":"Should I check .mfractor into source control?"},{"location":"mac/installation/","text":"Installing MFractor for Visual Studio Mac","title":"Installing MFractor for Visual Studio Mac"},{"location":"mac/installation/#installing-mfractor-for-visual-studio-mac","text":"","title":"Installing MFractor for Visual Studio Mac"},{"location":"mac/licensing-and-activation/","text":"Licensing Levels MFractor Lite MFractor Professional Purchasing MFractor Activating Your License License Key License File Retrieving Your License Deactivating MFractor","title":"Licensing Levels"},{"location":"mac/licensing-and-activation/#licensing-levels","text":"","title":"Licensing Levels"},{"location":"mac/licensing-and-activation/#mfractor-lite","text":"","title":"MFractor Lite"},{"location":"mac/licensing-and-activation/#mfractor-professional","text":"","title":"MFractor Professional"},{"location":"mac/licensing-and-activation/#purchasing-mfractor","text":"","title":"Purchasing MFractor"},{"location":"mac/licensing-and-activation/#activating-your-license","text":"","title":"Activating Your License"},{"location":"mac/licensing-and-activation/#license-key","text":"","title":"License Key"},{"location":"mac/licensing-and-activation/#license-file","text":"","title":"License File"},{"location":"mac/licensing-and-activation/#retrieving-your-license","text":"","title":"Retrieving Your License"},{"location":"mac/licensing-and-activation/#deactivating-mfractor","text":"","title":"Deactivating MFractor"},{"location":"mac/quickstart/","text":"Under construction How to get it? See How to activate? Cheat sheet of the main features and how to get to them. ## Setup ##","title":"Quickstart"},{"location":"mac/reporting-issues/","text":"","title":"Reporting issues"},{"location":"mac/uninstallation/","text":"Uninstalling MFractor for Visual Studio Windows Extensions Manage extensions Installed tab Click on MFractor. Click on Uninstall","title":"Uninstalling MFractor for Visual Studio Windows"},{"location":"mac/uninstallation/#uninstalling-mfractor-for-visual-studio-windows","text":"Extensions Manage extensions Installed tab Click on MFractor. Click on Uninstall","title":"Uninstalling MFractor for Visual Studio Windows"},{"location":"mac/upgrades/","text":"Upgrading MFractor Extension Manager File See http://addins.monodevelop.com/Project/Index/300","title":"Upgrading MFractor"},{"location":"mac/upgrades/#upgrading-mfractor","text":"","title":"Upgrading MFractor"},{"location":"mac/upgrades/#extension-manager","text":"","title":"Extension Manager"},{"location":"mac/upgrades/#file","text":"See http://addins.monodevelop.com/Project/Index/300","title":"File"},{"location":"release-notes/mac/current/","text":"Please note that no release notes for MFractor for Visual Studio Mac are available before v3.9.0 The current version of MFractor for Visual Studio Mac is v3.9.0. Releases (v3.9) v3.9.0 - Released on November 25th 2019 : Known Issues Please see Known Issues for a list of known issues in MFractor for Visaul Studio Mac. To submit a new issue, please see our Support documentation.","title":"Current"},{"location":"release-notes/mac/current/#releases-v39","text":"v3.9.0 - Released on November 25th 2019 :","title":"Releases (v3.9)"},{"location":"release-notes/mac/current/#known-issues","text":"Please see Known Issues for a list of known issues in MFractor for Visaul Studio Mac. To submit a new issue, please see our Support documentation.","title":"Known Issues"},{"location":"release-notes/mac/known-issues/","text":"","title":"Known issues"},{"location":"release-notes/mac/v3/v3.9/","text":"v3.9.0 Released on November 25th 2019 Issues Fixed:","title":"v3.9"},{"location":"release-notes/mac/v3/v3.9/#v390","text":"Released on November 25th 2019 Issues Fixed:","title":"v3.9.0"},{"location":"release-notes/windows/current/","text":"The current version of MFractor for Visual Studio Windows is v0.1.1 Releases (v0.1) v0.1.1 - Released on November 25th 2019 : Initial release of MFractor for Visual Studio Windows. Known Issues Please see Known Issues for a list of known issues in MFractor for Visaul Studio Windows. To submit a new issue, please see our Support documentation.","title":"Current"},{"location":"release-notes/windows/current/#releases-v01","text":"v0.1.1 - Released on November 25th 2019 : Initial release of MFractor for Visual Studio Windows.","title":"Releases (v0.1)"},{"location":"release-notes/windows/current/#known-issues","text":"Please see Known Issues for a list of known issues in MFractor for Visaul Studio Windows. To submit a new issue, please see our Support documentation.","title":"Known Issues"},{"location":"release-notes/windows/known-issues/","text":"","title":"Known issues"},{"location":"release-notes/windows/v0/v0.1/","text":"v0.1.1 Released on November 25th 2019 MFractor for Visual Studio Windows v0.1.1 is the initial release of the Windows version of MFractor. Officially, this product is known as MFractor for Visual Studio Windows (Preview 1) . Features: *","title":"v0.1"},{"location":"release-notes/windows/v0/v0.1/#v011","text":"Released on November 25th 2019 MFractor for Visual Studio Windows v0.1.1 is the initial release of the Windows version of MFractor. Officially, this product is known as MFractor for Visual Studio Windows (Preview 1) . Features: *","title":"v0.1.1"},{"location":"utilities/add-debug-watch/","text":"Quickly add a symbol to the debug watch window","title":"Add debug watch"},{"location":"utilities/clean-and-compress/","text":"Quickly creating a zip archive for solution or projects Right click on the project or solution in the solution pad.","title":"Clean and compress"},{"location":"utilities/delete-output-folders/","text":"**Remove working folders","title":"Delete output folders"},{"location":"windows/activation/","text":"","title":"Activation"},{"location":"windows/faq/","text":"Frequently Asked Questions Answers to some commonly asked questions What version of Visual Studio Windows is MFractor compatible with? MFractor is compatible with Visual Studio 2019. The latest version of MFractor always targets the current stable channel version of Visual Studio Mac. Where can I find the latest version of MFractor? Visual Studio Installer Visual Studio Extension Marketplace TODO: Instructions on finding in the Visual Studio marketplace TODO: Instruction on finding in addins.monodevelop.com When I first open a XAML file in Visual Studio Windows, MFractors IntelliSense and analysis is not immediately available. Is this a bug? No, this is the expected behaviour. Visual Studio asynchronously loads extensions for performance reasons and, as such, MFractor is loaded in the background How do I report a bug? Please follow the instructions in our Reporting Issues documentation.","title":"Faq"},{"location":"windows/faq/#frequently-asked-questions","text":"Answers to some commonly asked questions","title":"Frequently Asked Questions"},{"location":"windows/faq/#what-version-of-visual-studio-windows-is-mfractor-compatible-with","text":"MFractor is compatible with Visual Studio 2019. The latest version of MFractor always targets the current stable channel version of Visual Studio Mac.","title":"What version of Visual Studio Windows is MFractor compatible with?"},{"location":"windows/faq/#where-can-i-find-the-latest-version-of-mfractor","text":"","title":"Where can I find the latest version of MFractor?"},{"location":"windows/faq/#visual-studio-installer","text":"","title":"Visual Studio Installer"},{"location":"windows/faq/#visual-studio-extension-marketplace","text":"TODO: Instructions on finding in the Visual Studio marketplace TODO: Instruction on finding in addins.monodevelop.com","title":"Visual Studio Extension Marketplace"},{"location":"windows/faq/#when-i-first-open-a-xaml-file-in-visual-studio-windows-mfractors-intellisense-and-analysis-is-not-immediately-available-is-this-a-bug","text":"No, this is the expected behaviour. Visual Studio asynchronously loads extensions for performance reasons and, as such, MFractor is loaded in the background","title":"When I first open a XAML file in Visual Studio Windows, MFractors IntelliSense and analysis is not immediately available. Is this a bug?"},{"location":"windows/faq/#how-do-i-report-a-bug","text":"Please follow the instructions in our Reporting Issues documentation.","title":"How do I report a bug?"},{"location":"windows/installation/","text":"Installing MFractor for Visual Studio Windows After installing, Visual Studio Extension Manager Start Visual Studio windows Select continue without code Select the top extensions menu Search for MFractor Select install. Visual Studio Marketplace Head to https://marketplace.visualstudio.com/items?itemName=mfractor.windows Select Download Double click on the VSIX file. Installing from file","title":"Installing MFractor for Visual Studio Windows"},{"location":"windows/installation/#installing-mfractor-for-visual-studio-windows","text":"After installing,","title":"Installing MFractor for Visual Studio Windows"},{"location":"windows/installation/#visual-studio-extension-manager","text":"Start Visual Studio windows Select continue without code Select the top extensions menu Search for MFractor Select install.","title":"Visual Studio Extension Manager"},{"location":"windows/installation/#visual-studio-marketplace","text":"Head to https://marketplace.visualstudio.com/items?itemName=mfractor.windows Select Download Double click on the VSIX file.","title":"Visual Studio Marketplace"},{"location":"windows/installation/#installing-from-file","text":"","title":"Installing from file"},{"location":"windows/licensing-and-activation/","text":"Licensing Levels MFractor Lite MFractor Professional Purchasing MFractor Activating Your License License Key License File Deactivating MFractor","title":"Licensing Levels"},{"location":"windows/licensing-and-activation/#licensing-levels","text":"","title":"Licensing Levels"},{"location":"windows/licensing-and-activation/#mfractor-lite","text":"","title":"MFractor Lite"},{"location":"windows/licensing-and-activation/#mfractor-professional","text":"","title":"MFractor Professional"},{"location":"windows/licensing-and-activation/#purchasing-mfractor","text":"","title":"Purchasing MFractor"},{"location":"windows/licensing-and-activation/#activating-your-license","text":"","title":"Activating Your License"},{"location":"windows/licensing-and-activation/#license-key","text":"","title":"License Key"},{"location":"windows/licensing-and-activation/#license-file","text":"","title":"License File"},{"location":"windows/licensing-and-activation/#deactivating-mfractor","text":"","title":"Deactivating MFractor"},{"location":"windows/quickstart/","text":"How to get it? How to activate? Cheat sheet of the main features and how to get to them. Link to further documentation.","title":"Quickstart"},{"location":"windows/reporting-issues/","text":"To report an issue in MFractor for Visual Studio Windows,","title":"Reporting issues"},{"location":"windows/uninstallation/","text":"Uninstalling MFractor for Visual Studio windows To uninstall MFractor for Visual Studio Windows,","title":"Uninstalling MFractor for Visual Studio windows"},{"location":"windows/uninstallation/#uninstalling-mfractor-for-visual-studio-windows","text":"To uninstall MFractor for Visual Studio Windows,","title":"Uninstalling MFractor for Visual Studio windows"},{"location":"windows/upgrades/","text":"Uninstalling MFractor for Visual Studio Windows Uninstalling MFractor for Visual Studio Mac","title":"Uninstalling MFractor for Visual Studio Windows"},{"location":"windows/upgrades/#uninstalling-mfractor-for-visual-studio-windows","text":"","title":"Uninstalling MFractor for Visual Studio Windows"},{"location":"windows/upgrades/#uninstalling-mfractor-for-visual-studio-mac","text":"","title":"Uninstalling MFractor for Visual Studio Mac"},{"location":"xamarin-forms/attached-property-wizard/","text":"","title":"Attached property wizard"},{"location":"xamarin-forms/global-search/","text":"Work in progress Static resource global Search dynamic resource global Search Automationid global search.","title":"Global search"},{"location":"xamarin-forms/importing-font-assets/","text":"TODO: A tutorial on using MFractors font importer to import a new font (otf or ttf) into your Xamarin.Forms app.","title":"Importing font assets"},{"location":"xamarin-forms/localising-xaml/","text":"TODO: Over v","title":"Localising xaml"},{"location":"xamarin-forms/tooltips/","text":"TODO: Overview of MFractors tooltips Color format tooltips Thickness format tooltips Grid tooltip","title":"Tooltips"},{"location":"xamarin-forms/xaml-intellisense/","text":"TODO: An overview of MFractors XAML intellisense integration.","title":"Xaml intellisense"},{"location":"xamarin-forms/analysis/overview/","text":"","title":"Overview"},{"location":"xamarin-forms/binding-context-resolution/automatic-viewmodel-detection/","text":"MFractor uses automatic ViewModel resolution to infer the relationship between your view models and XAML views. This is done by looking for classes and XAML views that follow industry standard naming convention. Let's consider the following files: LoginPage.xaml - The XAML view. LoginPage.xaml.cs - The code behind for the XAML view. LoginViewModel - The a C# class that is the view model for the LoginPage view. Because these pages share the prefix Login and each has a distinct file extension or suffix, MFractor assumes the following relationships: The .xaml extension denotes that LoginPage.xaml is a xaml view. The .xaml.cs extension and the LoginPage component denotes that LoginPage.xaml.cs is the code behind implementation LoginPage view. The ViewModel suffix implies that LoginViewModel is a view model. When ViewModel is removed from LoginViewModel and Page is removed from LoginPage, the Login component implies that the LoginViewModel is related to the LoginPage XAML view and it's code behind file. MFractor uses these common naming conventions of Page.xaml, Page.xaml.cs and ViewModel to decide that LoginViewModel will probably be the BindingContext for LoginPage. The Page - ViewModel naming convention is used by several popular MVVM frameworks such as Prism and FreshMVVM. The following suffixes are supported for XAML views: Page: EG LoginPage.xaml - LoginViewModel View: EG LoginView.xaml - LoginViewModel The following suffixes are supported for View Models. ViewModel: LoginPage.xaml - LoginViewModel PageModel: LoginView.xaml - LoginPageModel PageViewModel: LoginView.xaml - LoginPageViewModel Model: LoginView.xaml - LoginModel VM: LoginView.xaml - LoginVM PageVM: LoginView.xaml - LoginPageVM","title":"Automatic ViewModel Detection"},{"location":"xamarin-forms/binding-context-resolution/binding-context-evaluation/","text":"Binding Context Evaluation In Xamarin.Forms, all views have the property BindingContext; this specifies the object that a view should data-bind with. When coding with XAML, we can use the x:Static markup extension to reference a static C# property and explicitly provide an instance of a C# class as the binding context: Entry BindingContext= {x:Static local:MyStaticClass.MyStaticProperty} / This is known as the View Model Locator Pattern. We implement a static class named ViewModelLocator and use a static, readonly property to return an instance of the object we want our XAML view to data-bind with. Historically the View Model Locator Pattern has been used to provide design time data to the Xamarin.Forms XAML previewer. For a deeper insight into this pattern, read James Montemagnos excellent View Model Locator article. For example, given a XAML page named LoginPage, we can explicitly provide an instance of LoginViewModel as the binding context like so: ViewModelLocator.cs public namespace MyApp { public static class ViewModelLocator { public static readonly LoginViewModel LoginViewModel = new LoginViewModel(); } } LoginPage.xaml ContentPage xmlns:local= clr-namespace:MyApp;assembly=MyApp BindingContext= {x:Static local:ViewModelLocator.LoginViewModel} / When MFractor starts analysis on LoginPage.xaml, it will check if any BindingContext properties have been assigned to. As the root ContentPage assigns a binding context, it will inspect the value component of the BindingContext attribute, check if it is a XAML expression and then evaluate it for the return type. For the {x:Static local:ViewModelLocator.LoginViewModel} expression, MFractor will resolve the ViewModelLocator class in the local namespace and then grab the C# type of the LoginViewModel property. This informs MFractor that the page will be bound to a LoginViewModel instance and therefore to analyse all Binding expressions against the LoginViewModel type. Explicit binding context resolution will also work when referencing another element using x:Reference expressions. For example, we can bind the on/off state of a switch to the visibility of a text label like so: Switch x:Name= mySwitch / Label BindingContext= {x:Reference mySwitch} IsVisible= {Binding IsToggled} / When MFractor analyses the {Binding IsToggled} expression, it will evaluate the {x:Reference mySwitch} expression and use the type of mySwitch as the BindingContext (Xamarin.Forms.Switch). Explicit binding context resolution will always override implicit binding context resolution. If your XAML views are named using the conventions listed above but your page or a view explicitly assigns the BindingContext property then MFractor will use the BindingContext return type instead of the implicit Mvvm relationship.","title":"BindingContext Evaluation"},{"location":"xamarin-forms/binding-context-resolution/binding-context-evaluation/#binding-context-evaluation","text":"In Xamarin.Forms, all views have the property BindingContext; this specifies the object that a view should data-bind with. When coding with XAML, we can use the x:Static markup extension to reference a static C# property and explicitly provide an instance of a C# class as the binding context: Entry BindingContext= {x:Static local:MyStaticClass.MyStaticProperty} / This is known as the View Model Locator Pattern. We implement a static class named ViewModelLocator and use a static, readonly property to return an instance of the object we want our XAML view to data-bind with. Historically the View Model Locator Pattern has been used to provide design time data to the Xamarin.Forms XAML previewer. For a deeper insight into this pattern, read James Montemagnos excellent View Model Locator article. For example, given a XAML page named LoginPage, we can explicitly provide an instance of LoginViewModel as the binding context like so: ViewModelLocator.cs public namespace MyApp { public static class ViewModelLocator { public static readonly LoginViewModel LoginViewModel = new LoginViewModel(); } } LoginPage.xaml ContentPage xmlns:local= clr-namespace:MyApp;assembly=MyApp BindingContext= {x:Static local:ViewModelLocator.LoginViewModel} / When MFractor starts analysis on LoginPage.xaml, it will check if any BindingContext properties have been assigned to. As the root ContentPage assigns a binding context, it will inspect the value component of the BindingContext attribute, check if it is a XAML expression and then evaluate it for the return type. For the {x:Static local:ViewModelLocator.LoginViewModel} expression, MFractor will resolve the ViewModelLocator class in the local namespace and then grab the C# type of the LoginViewModel property. This informs MFractor that the page will be bound to a LoginViewModel instance and therefore to analyse all Binding expressions against the LoginViewModel type. Explicit binding context resolution will also work when referencing another element using x:Reference expressions. For example, we can bind the on/off state of a switch to the visibility of a text label like so: Switch x:Name= mySwitch / Label BindingContext= {x:Reference mySwitch} IsVisible= {Binding IsToggled} / When MFractor analyses the {Binding IsToggled} expression, it will evaluate the {x:Reference mySwitch} expression and use the type of mySwitch as the BindingContext (Xamarin.Forms.Switch). Explicit binding context resolution will always override implicit binding context resolution. If your XAML views are named using the conventions listed above but your page or a view explicitly assigns the BindingContext property then MFractor will use the BindingContext return type instead of the implicit Mvvm relationship.","title":"Binding Context Evaluation"},{"location":"xamarin-forms/binding-context-resolution/cross-project-binding-context-resolution/","text":"Cross Project Binding Context Resolution If your views and view models are in separate projects and you'd like to use implicit MVVM resolution, you'll need to give MFractor a nudge in the right direction. Unfortunately, it is too expensive to scan the solution to match view models to pages; the scan takes anywhere between 10's to 100's of milliseconds in a moderately sized solution. Therefore, for efficiency reasons, you need to use an MFractor configuration to enable cross-project MVVM resolution. To make MFractor use View Models in a project separate to your views, you'll need to create an MFractor config for each project. In the project that contains your views, create a file named app.mfc.xml with the following content: ?xml version= 1.0 encoding= UTF-8 ? mfractor configure id= com.mfractor.configuration.forms.mvvm_resolution property name= ViewModelsProjectName value= TODO: Insert the name of your view models project as it appears in the solution explorer / /configure /mfractor In the project that contains your view models, create a file named app.mfc.xml with the following content: ?xml version= 1.0 encoding= UTF-8 ? mfractor configure id= com.mfractor.configuration.forms.mvvm_resolution property name= ViewsProjectName value= TODO: Insert the name of your views project as it appears in the solution explorer / /configure /mfractor","title":"Cross Project Binding Context Resolution"},{"location":"xamarin-forms/binding-context-resolution/cross-project-binding-context-resolution/#cross-project-binding-context-resolution","text":"If your views and view models are in separate projects and you'd like to use implicit MVVM resolution, you'll need to give MFractor a nudge in the right direction. Unfortunately, it is too expensive to scan the solution to match view models to pages; the scan takes anywhere between 10's to 100's of milliseconds in a moderately sized solution. Therefore, for efficiency reasons, you need to use an MFractor configuration to enable cross-project MVVM resolution. To make MFractor use View Models in a project separate to your views, you'll need to create an MFractor config for each project. In the project that contains your views, create a file named app.mfc.xml with the following content: ?xml version= 1.0 encoding= UTF-8 ? mfractor configure id= com.mfractor.configuration.forms.mvvm_resolution property name= ViewModelsProjectName value= TODO: Insert the name of your view models project as it appears in the solution explorer / /configure /mfractor In the project that contains your view models, create a file named app.mfc.xml with the following content: ?xml version= 1.0 encoding= UTF-8 ? mfractor configure id= com.mfractor.configuration.forms.mvvm_resolution property name= ViewsProjectName value= TODO: Insert the name of your views project as it appears in the solution explorer / /configure /mfractor","title":"Cross Project Binding Context Resolution"},{"location":"xamarin-forms/binding-context-resolution/data-template-binding-context-resolution/","text":"Data Template Binding Context Resolution Data templates are used to provide a nested XAML view to a view that displays many occurrences of that view. For example, a ListView uses a DataTemplate to specify the view appearance of each instance provided through the ItemsSource property. MFractor will attempt to infer the BindingContext for a data templates view by resolving the ItemsSource property on the wrapping view. Consider the following code: ListView ItemsSource= {Binding Contacts} ListView.ItemTemplate DataTemplate TextCell Text= {Binding DisplayName} / /DataTemplate /ListView.ItemTemplate /ListView The inner DataTemplate has a TextCell where the Text property is provided by the binding expression {Binding DisplayName}. To analyse this expression, MFractor requires a binding context; MFractor will walk out to the encapsulating view (ListView), locate the ItemsSource property and evaluate the expression. When the return type is an IEnumerable or array, MFractor unwraps the generic or array and grabs the inner type. This provides the binding context type for the binding expressions used within the data template.","title":"DataTemplate Binding Context Resolution"},{"location":"xamarin-forms/binding-context-resolution/data-template-binding-context-resolution/#data-template-binding-context-resolution","text":"Data templates are used to provide a nested XAML view to a view that displays many occurrences of that view. For example, a ListView uses a DataTemplate to specify the view appearance of each instance provided through the ItemsSource property. MFractor will attempt to infer the BindingContext for a data templates view by resolving the ItemsSource property on the wrapping view. Consider the following code: ListView ItemsSource= {Binding Contacts} ListView.ItemTemplate DataTemplate TextCell Text= {Binding DisplayName} / /DataTemplate /ListView.ItemTemplate /ListView The inner DataTemplate has a TextCell where the Text property is provided by the binding expression {Binding DisplayName}. To analyse this expression, MFractor requires a binding context; MFractor will walk out to the encapsulating view (ListView), locate the ItemsSource property and evaluate the expression. When the return type is an IEnumerable or array, MFractor unwraps the generic or array and grabs the inner type. This provides the binding context type for the binding expressions used within the data template.","title":"Data Template Binding Context Resolution"},{"location":"xamarin-forms/binding-context-resolution/design-time-binding-context-attribute/","text":"It's also possible to explicitly specify a desired binding context by applying the DesignTimeBindingContext attribute to the code behind class. To get started, add the following code file to your project: DesignTimeBindingContextAttribute.cs using System; namespace MyApp.Attributes { /// summary /// Apply the design time binding context attribute to your code-behind class to inform tools of your intended runtime binding context. /// /summary [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class DesignTimeBindingContextAttribute : Attribute { /// summary /// Specifies the design time binding context using a fully qualified type name. /// /// For example: MyApp.ViewModels.LoginViewModel. /// /summary /// param name= typeName The fully qualified type name for the design time binding context. /param public DesignTimeBindingContextAttribute(string typeName) { } /// summary /// Specifies the design time binding context using typeof(). /// /// For example: typeof(LoginViewModel) /// /summary /// param name= type The see cref= System.Type / for the design time binding context, using typeof(). /param public DesignTimeBindingContextAttribute(Type type) { } } } Next, apply this attribute onto the code-behind class for your XAML file: Applying By Type [DesignTimeBindingContext(typeof(MyBindingContext))] Applying By String [DesignTimeBindingContext(\"MyApp.MyBindingContext\")] Applying this attribute directs MFractor at your binding context to enable data-binding IntelliSense, code actions and code analysis for that XAML file.","title":"Using The DesignTimeBindingContextAttribute"},{"location":"xamarin-forms/binding-context-resolution/overview/","text":"Binding Context Resolution MFractor includes many features to make working with XAML and the MVVM pattern easier. To power these features, MFractor is capable of intelligently resolving a XAML files binding context (even when none is specified) and can also evaluate markup expressions (such as x:Static or Binding expressions) or can walk through the XAML hierarchy to evaluate the correct binding context for a given node. So, what is a binding context? When using the Model-View-ViewModel architecture pattern, views use a Binding Context to display and transfer data between the application logic layer and the view layer with minimal dependencies. This is accomplished through data binding; properties on a view are bound to properties on a backing object through binding mechanisms allowing two-way data transfer between the UI and application logic. For a full tutorial on Mvvm architecture, please Microsofts The MVVM Pattern article. MFractor supports several methods of binding context resolution: Binding Context Evaluation Automatic View Model Detection Using the DesignTimeBindingContextAttribute DataTemplate Binding Context Resolution Cross Project Binding Context Resolution","title":"Overview"},{"location":"xamarin-forms/binding-context-resolution/overview/#binding-context-resolution","text":"MFractor includes many features to make working with XAML and the MVVM pattern easier. To power these features, MFractor is capable of intelligently resolving a XAML files binding context (even when none is specified) and can also evaluate markup expressions (such as x:Static or Binding expressions) or can walk through the XAML hierarchy to evaluate the correct binding context for a given node. So, what is a binding context? When using the Model-View-ViewModel architecture pattern, views use a Binding Context to display and transfer data between the application logic layer and the view layer with minimal dependencies. This is accomplished through data binding; properties on a view are bound to properties on a backing object through binding mechanisms allowing two-way data transfer between the UI and application logic. For a full tutorial on Mvvm architecture, please Microsofts The MVVM Pattern article. MFractor supports several methods of binding context resolution: Binding Context Evaluation Automatic View Model Detection Using the DesignTimeBindingContextAttribute DataTemplate Binding Context Resolution Cross Project Binding Context Resolution","title":"Binding Context Resolution"},{"location":"xamarin-forms/code-actions/overview/","text":"","title":"Overview"},{"location":"xamarin-forms/colors/code-actions/","text":"","title":"Code actions"},{"location":"xamarin-forms/colors/intellisense/","text":"","title":"Intellisense"},{"location":"xamarin-forms/creating-custom-controls/bindable-property-wizard/","text":"TODO: Explain how to use the","title":"Bindable property wizard"},{"location":"xamarin-forms/creating-custom-controls/extracting-custom-controls/","text":"","title":"Extracting custom controls"},{"location":"xamarin-forms/custom-renderers/find-custom-renderers/","text":"Coming soon TODO: Discuss how to use the Find Custom Renderers feature.","title":"Find custom renderers"},{"location":"xamarin-forms/custom-renderers/generate-custom-renderers/","text":"","title":"Generate custom renderers"},{"location":"xamarin-forms/dynamic-resources/intellisense/","text":"","title":"Intellisense"},{"location":"xamarin-forms/dynamic-resources/navigation/","text":"","title":"Navigation"},{"location":"xamarin-forms/dynamic-resources/search/","text":"","title":"Search"},{"location":"xamarin-forms/dynamic-resources/tooltips/","text":"","title":"Tooltips"},{"location":"xamarin-forms/grids/analysis/","text":"","title":"Analysis"},{"location":"xamarin-forms/grids/code-actions/","text":"","title":"Code actions"},{"location":"xamarin-forms/grids/intellisense/","text":"","title":"Intellisense"},{"location":"xamarin-forms/grids/tooltips/","text":"","title":"Tooltips"},{"location":"xamarin-forms/value-converters/value-converter-analysis/","text":"","title":"Value converter analysis"},{"location":"xamarin-forms/value-converters/value-converter-wizard/","text":"","title":"Value converter wizard"},{"location":"xamarin-forms/working-with-styles/extracting-styles/","text":"","title":"Extracting styles"},{"location":"xamarin-forms/working-with-styles/matching-style-analysis/","text":"","title":"Matching style analysis"},{"location":"xamarin-forms/working-with-viewmodels/data-binding-analysis/","text":"","title":"Data binding analysis"},{"location":"xamarin-forms/working-with-viewmodels/generating-properties-and-commands/","text":"","title":"Generating properties and commands"},{"location":"xamarin-forms/working-with-viewmodels/mvvm-wizard/","text":"","title":"Mvvm wizard"},{"location":"xamarin-forms/working-with-viewmodels/view-viewmodel-navigation/","text":"","title":"View viewmodel navigation"},{"location":"xamarin-forms/working-with-viewmodels/viewmodel-intellisense/","text":"","title":"Viewmodel intellisense"}]}