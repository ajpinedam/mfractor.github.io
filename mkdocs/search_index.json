{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nWelcome to the documentation for MFractor, incredible Xamarin tools.\n\n\nMFractor adds several features so you can make great Xamarin.Forms apps faster:\n\n\n\n\nSpend less time debugging with a comprehensive xaml analyser.\n\n\nWrite great code faster with Xaml refactoring and code generation.\n\n\nQuickly explore Xamarin.Forms projects with rich xaml navigation.\n\n\n... And much, much more!\n\n\n\n\nSlowly, I am building the ReSharper for Xamarin Studio and I'm thrilled that you have joined me on the journey.\n\n\nTo get started, checkout:\n\n\n\n\nThe Xamarin.Forms Quickstart Guide\n\n\nThe Xamarin.Android Quickstart Guide\n\n\n\n\nIf something doesn't work quite right or you'd like a sweet new feature added, be patient and contact me:\n\n\n\n\nVia Twitter: Give me a holla at \n@matthewrdev\n\n\nVia Slack: Drop in to chat anytime in the \n#mfractor Xamarin Slack sub-channel\n.\n\n\nVia Email: Shot an email to hello@mfractor.com\n\n\n\n\nFinally, thank you for installing and using MFractor. It means the world to me.\n\n\nMatthew Robbins - Creator of MFractor. \u270c\ufe0f", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "Welcome to the documentation for MFractor, incredible Xamarin tools.  MFractor adds several features so you can make great Xamarin.Forms apps faster:   Spend less time debugging with a comprehensive xaml analyser.  Write great code faster with Xaml refactoring and code generation.  Quickly explore Xamarin.Forms projects with rich xaml navigation.  ... And much, much more!   Slowly, I am building the ReSharper for Xamarin Studio and I'm thrilled that you have joined me on the journey.  To get started, checkout:   The Xamarin.Forms Quickstart Guide  The Xamarin.Android Quickstart Guide   If something doesn't work quite right or you'd like a sweet new feature added, be patient and contact me:   Via Twitter: Give me a holla at  @matthewrdev  Via Slack: Drop in to chat anytime in the  #mfractor Xamarin Slack sub-channel .  Via Email: Shot an email to hello@mfractor.com   Finally, thank you for installing and using MFractor. It means the world to me.  Matthew Robbins - Creator of MFractor. \u270c\ufe0f", 
            "title": "Welcome"
        }, 
        {
            "location": "/setup/", 
            "text": "Setup\n\n\nInstalling, activating and updating MFractor\n\n\nIntroduction\n\n\nThis document covers how to install, activate, update and uninstall MFractor for Xamarin Studio.\n\n\nInstall MFractor\n\n\nThe simplest way to install MFractor into Xamarin Studio is by using the MFractor.Installer helper addin.\n\n\nThis addin lives inside the Addin Manager in Xamarin Studio, under \nGallery\n -\n \nIDE extensions\n.\n\n\nOpen up Xamarin Studio and click on the \nXamarin Studio\n menu and then \nAddins...\n\n\n\n\nOnce the Addin Manager opens, click \nGallery\n and under \nIDE extensions\n locate \nMFractor.Installer\n. If this isn't present, hit the \nRefresh\n button to update the Gallery listings.\n\n\n\n\nOnce you've located \nMFractor.Installer\n, left click on it to select it. In the right hand detail view, click \nInstall\n. Xamarin Studio will prompt you for confirmation, click \nInstall\n\n\n\n\nYou will then see a download dialog appear and MFractor will download and install.\n\n\n\n\nInstall MFractor Manually\n\n\nMFractor can be installed directly through the addin manager's \nInstall from file\n button.\n\n\nFirstly, download the latest version of MFractor for Xamarin studio at \naddins.mfractor.com/MFractor.mpack\n\n\nOpen up Xamarin Studio and click on the \nXamarin Studio\n menu and then \nAddins...\n\n\n\n\nWithin the Addin Manager, click the \nInstall from file\n button in the bottom left of the Addin Manager.\n\n\nBrowse to \nMFractor.mpack\n and then \n\n\n\n\nActivation\n\n\nTo use MFractor, you'll need activate it using your email address.\n\n\nFirst things first, \nclose the Addin Manager\n. There is a known bug that blocks the email entry field from receiving keyboard when the Addin Manager is open. It's a pain and we are working on fixing this.\n\n\nTo activate MFractor, enter you email and then click \nActivate\n.\n\n\n\n\nTada! You are now ready to rock. Why not learn how to use MFractor for \nXamarin.Forms\n or \nXamarin.Android\n next?\n\n\nUpdating\n\n\nWhen MFractor installs into Xamarin Studio, it'll register itself into Xamarin Studios addin updater.\n\n\nThis means that Xamarin Studio will automatically prompt you that an update is available.\n\n\nHowever, you can check for udpate at any time by opening the \nXamarin Studio\n main menu and selecting \nCheck for Updates...\n\n\n\n\nXamarin Studio will check the MFractor addin server for updates and prompt you to update if there is a new version!\n\n\nUninstalling MFractor\n\n\nYou can uninstall MFractor through the addin manager at any time.\n\n\nSelect the \nXamarin Studio\n main menu and then \nAddins\n\n\nUnder \nGallery\n then \nIDE extensions\n select the MFractor addin list item and then click \nUninstall\n\n\nYou will be prompted to uninstall the addin, confirm uninstallation by clicking \nUninstall", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/#setup", 
            "text": "Installing, activating and updating MFractor", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/#introduction", 
            "text": "This document covers how to install, activate, update and uninstall MFractor for Xamarin Studio.", 
            "title": "Introduction"
        }, 
        {
            "location": "/setup/#install-mfractor", 
            "text": "The simplest way to install MFractor into Xamarin Studio is by using the MFractor.Installer helper addin.  This addin lives inside the Addin Manager in Xamarin Studio, under  Gallery  -   IDE extensions .  Open up Xamarin Studio and click on the  Xamarin Studio  menu and then  Addins...   Once the Addin Manager opens, click  Gallery  and under  IDE extensions  locate  MFractor.Installer . If this isn't present, hit the  Refresh  button to update the Gallery listings.   Once you've located  MFractor.Installer , left click on it to select it. In the right hand detail view, click  Install . Xamarin Studio will prompt you for confirmation, click  Install   You will then see a download dialog appear and MFractor will download and install.", 
            "title": "Install MFractor"
        }, 
        {
            "location": "/setup/#install-mfractor-manually", 
            "text": "MFractor can be installed directly through the addin manager's  Install from file  button.  Firstly, download the latest version of MFractor for Xamarin studio at  addins.mfractor.com/MFractor.mpack  Open up Xamarin Studio and click on the  Xamarin Studio  menu and then  Addins...   Within the Addin Manager, click the  Install from file  button in the bottom left of the Addin Manager.  Browse to  MFractor.mpack  and then", 
            "title": "Install MFractor Manually"
        }, 
        {
            "location": "/setup/#activation", 
            "text": "To use MFractor, you'll need activate it using your email address.  First things first,  close the Addin Manager . There is a known bug that blocks the email entry field from receiving keyboard when the Addin Manager is open. It's a pain and we are working on fixing this.  To activate MFractor, enter you email and then click  Activate .   Tada! You are now ready to rock. Why not learn how to use MFractor for  Xamarin.Forms  or  Xamarin.Android  next?", 
            "title": "Activation"
        }, 
        {
            "location": "/setup/#updating", 
            "text": "When MFractor installs into Xamarin Studio, it'll register itself into Xamarin Studios addin updater.  This means that Xamarin Studio will automatically prompt you that an update is available.  However, you can check for udpate at any time by opening the  Xamarin Studio  main menu and selecting  Check for Updates...   Xamarin Studio will check the MFractor addin server for updates and prompt you to update if there is a new version!", 
            "title": "Updating"
        }, 
        {
            "location": "/setup/#uninstalling-mfractor", 
            "text": "You can uninstall MFractor through the addin manager at any time.  Select the  Xamarin Studio  main menu and then  Addins  Under  Gallery  then  IDE extensions  select the MFractor addin list item and then click  Uninstall  You will be prompted to uninstall the addin, confirm uninstallation by clicking  Uninstall", 
            "title": "Uninstalling MFractor"
        }, 
        {
            "location": "/support/", 
            "text": "Support\n\n\nGeting help for MFractor when something's amiss or giving feedback\n\n\nProduct Support\n\n\nIf something doesn't work quite right or you'd like a sweet new feature added, be patient and contact me:\n\n\n\n\nVia Twitter: Give me a holla at \n@matthewrdev\n\n\nVia Slack: Drop in to chat anytime in the \n#mfractor Xamarin Slack sub-channel\n.\n\n\nVia Email: Shot an email to \nhello@mfractor.com\n\n\n\n\nLearning To Use MFractor\n\n\nMFractor does a lot so it may take a little while to learn its ins and outs. If you'd like to learn how to best use it, you have a few options:\n\n\n\n\nGet started by reading the \nXamarin.Forms Quickstart\n and \nXamarin.Android Quickstart\n; these are a quick overview of the most used features.\n\n\nRead the in-depth docs for both Xamarin.Forms and Xamarin.Android (se the menu to the left). Each article covers a feature in-depth and fully explains how to use it.\n\n\nRead the \ntutorials\n for and in-depth exploration of a feature from first concepts to practical use cases.\n\n\nDrop into the \n#mfractor Xamarin Slack sub-channel\n and start chatting to me (Matthew Robbins). I'm happy to answer any questions you have\n\n\n\n\nFiling A Bug Report\n\n\nIf you notice a bug while you are using MFractor, please file a bug report by taking the following steps:\n\n\n\n\nPrepare a short 2-3 sentence description of the bug, the steps you took that triggered it and the symptoms of the bug.\n\n\nCopy MFractors version information by opening the \nAbout\n dialog (\nHelp\n -\n \nMFractor\n -\n \nAbout\n) and click \nCopy Build Details Into Clipboard\n.\n\n\nEmail the description and build version to \nhello@mfractor.com\n.", 
            "title": "Support"
        }, 
        {
            "location": "/support/#support", 
            "text": "Geting help for MFractor when something's amiss or giving feedback", 
            "title": "Support"
        }, 
        {
            "location": "/support/#product-support", 
            "text": "If something doesn't work quite right or you'd like a sweet new feature added, be patient and contact me:   Via Twitter: Give me a holla at  @matthewrdev  Via Slack: Drop in to chat anytime in the  #mfractor Xamarin Slack sub-channel .  Via Email: Shot an email to  hello@mfractor.com", 
            "title": "Product Support"
        }, 
        {
            "location": "/support/#learning-to-use-mfractor", 
            "text": "MFractor does a lot so it may take a little while to learn its ins and outs. If you'd like to learn how to best use it, you have a few options:   Get started by reading the  Xamarin.Forms Quickstart  and  Xamarin.Android Quickstart ; these are a quick overview of the most used features.  Read the in-depth docs for both Xamarin.Forms and Xamarin.Android (se the menu to the left). Each article covers a feature in-depth and fully explains how to use it.  Read the  tutorials  for and in-depth exploration of a feature from first concepts to practical use cases.  Drop into the  #mfractor Xamarin Slack sub-channel  and start chatting to me (Matthew Robbins). I'm happy to answer any questions you have", 
            "title": "Learning To Use MFractor"
        }, 
        {
            "location": "/support/#filing-a-bug-report", 
            "text": "If you notice a bug while you are using MFractor, please file a bug report by taking the following steps:   Prepare a short 2-3 sentence description of the bug, the steps you took that triggered it and the symptoms of the bug.  Copy MFractors version information by opening the  About  dialog ( Help  -   MFractor  -   About ) and click  Copy Build Details Into Clipboard .  Email the description and build version to  hello@mfractor.com .", 
            "title": "Filing A Bug Report"
        }, 
        {
            "location": "/xamarin-forms-quickstart/", 
            "text": "Xamarin.Forms Quick Start\n\n\nLearn to use the most handy features in MFractor for Xamarin.Forms\n\n\nIntroduction\n\n\nWelcome to the quickstart guide for using MFractor with Xamarin.Forms.\n\n\nThis document explains the most useful features of MFractor for Xamarin.Forms.\n\n\nConfiguring A Binding Context\n\n\nWhen the \nBindingContext\n property is explicitly set for a Xaml view, MFractor can analyse binding expressions and perform refactoring from Xaml to the binding context.\n\n\nWe explicitly configure the binding context using a view model locator:\n\n\nViewModelLocator.cs\n\n\npublic namespace MyApp\n{\n  public static class ViewModelLocator\n  {\n      public static readonly LoginViewModel LoginViewModel = new LoginViewModel();\n  }\n}\n\n\n\n\nLoginPage.xaml\n\n\nContentPage\n  xmlns:local=\nclr-namespace:MyApp;assembly=MyApp\n\n  BindingContext=\n{x:Static local:ViewModelLocator.LoginViewModel}\n/\n\n\n\n\n\nFor more detail, see \nConfigure Binding Context\n.\n\n\nMvvm Naming Conventions\n\n\nImplicitly associate a view to a ViewModel using these naming conventions:\n\n\n\n\nClasses that end with \nViewModel\n are assumed to be a view model for a Xaml view.\n\n\nXaml files that end with \nPage\n or \nView\n are assumed to be a xaml view for a view model.\n\n\nWhen a view and view model share the same name without \nPage\n, \nView\n or \nViewModel\n, MFractor assumes an implicit association.\n\n\n\n\nConsider \nLoginPage.xaml\n, \nLoginPage.xaml.cs\n and \nLoginViewMode.cs\n:\n\n\n\n\nLoginPage.xaml\n is considered a xaml view.\n\n\nLoginPage.xaml.cs\n is considered the code behind class.\n\n\nLoginViewModel.cs\n is considered the view model.\n\n\n\n\nFor more detail, see \nImplicit Binding Context Resolution\n.\n\n\nUsing Mvvm Navigation\n\n\nWe can quickly navigate between Views, Code Behind Class and ViewModel when we use the \nMvvm naming conventions\n.\n\n\nRight click and select:\n\n\n\n\nGo-To ViewModel\n when in a Xaml view or code behind class to jump to the ViewModel.\n\n\nGo-To Code Behind Class\n when in a Xaml view or ViewModel to jump to the code behind class.\n\n\nGo-To Xaml View\n when in a code behind class or view model to jump to the Xaml view.\n\n\n\n\nFor more detail, see \nMvvm Navigation\n.\n\n\nXaml Analysis\n\n\nThe Xaml analyser inspects Xaml files for code issues and underlines the issue in either red or yellow.\n\n\n\n\nHover over a xaml issue to view more information on the\n\n\nCode issues underlined in yellow are \nfixable\n. Right click on the issue region, browse to \nFix\n and select the fix you'd like to apply.\n\n\n\n\nFor more detail, see:\n\n\n\n\nXaml Analysis\n\n\nFull List of Xaml Analysers\n\n\n\n\nGenerating ViewModel Bindings\n\n\nWhen a binding context is specified for a xaml view (\nConfiguring A Binding Context\n), MFractor provides code fixes to implement missing bindings.\n\n\nRight click on the value component of a binding expression, browse to  \nFix\n and then select \nGenerate property...\n:\n\n\nFor example:\n\n\n\n\nFor more detail, see \nImplementing Missing Bindings\n.\n\n\nImplementing ViewModels\n\n\nWhen a xaml view has binding expressions but the binding context is not \nexplicitly\n or \nimplicitly\n defined, MFractor can collect all binding expressions and generate an implementation of the binding context as a ViewModel.\n\n\nRight click on anywhere in a document, browse to \nRefactor\n and then select \nImplement View Model\n:\n\n\nFor example:\n\n\n\n\nFor more detail, see \nImplementing a ViewModel\n.", 
            "title": "Xamarin.Forms Quickstart"
        }, 
        {
            "location": "/xamarin-forms-quickstart/#xamarinforms-quick-start", 
            "text": "Learn to use the most handy features in MFractor for Xamarin.Forms", 
            "title": "Xamarin.Forms Quick Start"
        }, 
        {
            "location": "/xamarin-forms-quickstart/#introduction", 
            "text": "Welcome to the quickstart guide for using MFractor with Xamarin.Forms.  This document explains the most useful features of MFractor for Xamarin.Forms.", 
            "title": "Introduction"
        }, 
        {
            "location": "/xamarin-forms-quickstart/#configuring-a-binding-context", 
            "text": "When the  BindingContext  property is explicitly set for a Xaml view, MFractor can analyse binding expressions and perform refactoring from Xaml to the binding context.  We explicitly configure the binding context using a view model locator:  ViewModelLocator.cs  public namespace MyApp\n{\n  public static class ViewModelLocator\n  {\n      public static readonly LoginViewModel LoginViewModel = new LoginViewModel();\n  }\n}  LoginPage.xaml  ContentPage\n  xmlns:local= clr-namespace:MyApp;assembly=MyApp \n  BindingContext= {x:Static local:ViewModelLocator.LoginViewModel} /   For more detail, see  Configure Binding Context .", 
            "title": "Configuring A Binding Context"
        }, 
        {
            "location": "/xamarin-forms-quickstart/#mvvm-naming-conventions", 
            "text": "Implicitly associate a view to a ViewModel using these naming conventions:   Classes that end with  ViewModel  are assumed to be a view model for a Xaml view.  Xaml files that end with  Page  or  View  are assumed to be a xaml view for a view model.  When a view and view model share the same name without  Page ,  View  or  ViewModel , MFractor assumes an implicit association.   Consider  LoginPage.xaml ,  LoginPage.xaml.cs  and  LoginViewMode.cs :   LoginPage.xaml  is considered a xaml view.  LoginPage.xaml.cs  is considered the code behind class.  LoginViewModel.cs  is considered the view model.   For more detail, see  Implicit Binding Context Resolution .", 
            "title": "Mvvm Naming Conventions"
        }, 
        {
            "location": "/xamarin-forms-quickstart/#using-mvvm-navigation", 
            "text": "We can quickly navigate between Views, Code Behind Class and ViewModel when we use the  Mvvm naming conventions .  Right click and select:   Go-To ViewModel  when in a Xaml view or code behind class to jump to the ViewModel.  Go-To Code Behind Class  when in a Xaml view or ViewModel to jump to the code behind class.  Go-To Xaml View  when in a code behind class or view model to jump to the Xaml view.   For more detail, see  Mvvm Navigation .", 
            "title": "Using Mvvm Navigation"
        }, 
        {
            "location": "/xamarin-forms-quickstart/#xaml-analysis", 
            "text": "The Xaml analyser inspects Xaml files for code issues and underlines the issue in either red or yellow.   Hover over a xaml issue to view more information on the  Code issues underlined in yellow are  fixable . Right click on the issue region, browse to  Fix  and select the fix you'd like to apply.   For more detail, see:   Xaml Analysis  Full List of Xaml Analysers", 
            "title": "Xaml Analysis"
        }, 
        {
            "location": "/xamarin-forms-quickstart/#generating-viewmodel-bindings", 
            "text": "When a binding context is specified for a xaml view ( Configuring A Binding Context ), MFractor provides code fixes to implement missing bindings.  Right click on the value component of a binding expression, browse to   Fix  and then select  Generate property... :  For example:   For more detail, see  Implementing Missing Bindings .", 
            "title": "Generating ViewModel Bindings"
        }, 
        {
            "location": "/xamarin-forms-quickstart/#implementing-viewmodels", 
            "text": "When a xaml view has binding expressions but the binding context is not  explicitly  or  implicitly  defined, MFractor can collect all binding expressions and generate an implementation of the binding context as a ViewModel.  Right click on anywhere in a document, browse to  Refactor  and then select  Implement View Model :  For example:   For more detail, see  Implementing a ViewModel .", 
            "title": "Implementing ViewModels"
        }, 
        {
            "location": "/xamarin-android-quickstart/", 
            "text": "WORK IN PROGRESS\n\n\nXamarin.Android Quickstart\n\n\nLearn to use the most handy features in MFractor for Xamarin.Android\n\n\nIntroduction\n\n\nWelcome to the quickstart guide for using MFractor with Xamarin.Android.\n\n\nThis document explains the most useful features of MFractor for Xamarin.Android.\n\n\nProject Resource Indexing\n\n\nWhen an Android project is opened, MFractor needs to \nindex\n the projects resources; this is all files and folders under \nResources\\\n including layouts, menus, drawables, strings, colors etc.\n\n\nWhen the indexing operation finishes, you might see a status message in the top toolbar:\n\n\n\n\nThe indexing will generate a SQL database under a folder named \n.droidres\n; this database contains relational information about each of the Android projects within the current solution which powers most features in MFractor for Xamarin.Android.\n\n\nEach time a resource document is edited, MFractor will re-index that particular file into .droidres database.\n\n\nAt any time you can force a complete re-index of your solution by selecting \nTools\n in the main menu and then \nMFractor - Resync Solution Resources\n.\n\n\nResource Tooltips\n\n\nHover over a resource expression to view a tooltip that lists all configurations of that resource.\n\n\nC# Expression\n\n\nResource.Layout.Toolbar\n\n\n\n\nXml Expression\n\n\n@+id/toolbar\n\n\n\n\nFor example:\n\n\n\n\nGo-To Resource Declaration\n\n\nWhen the caret is inside a C# or Xml resource expression, you can press \nCommand+D\n to jump to the implementation of that resource.\n\n\nWhen a resource has multiple configurations, a selector dialog is displayed where you can select the specific configuration to jump to:\n\n\n\n\nResource IntelliSense\n\n\nResource Analysis\n\n\nFind All Resource References\n\n\nC# Code Analysis For Android", 
            "title": "Xamarin.Android Quickstart"
        }, 
        {
            "location": "/xamarin-android-quickstart/#xamarinandroid-quickstart", 
            "text": "Learn to use the most handy features in MFractor for Xamarin.Android", 
            "title": "Xamarin.Android Quickstart"
        }, 
        {
            "location": "/xamarin-android-quickstart/#introduction", 
            "text": "Welcome to the quickstart guide for using MFractor with Xamarin.Android.  This document explains the most useful features of MFractor for Xamarin.Android.", 
            "title": "Introduction"
        }, 
        {
            "location": "/xamarin-android-quickstart/#project-resource-indexing", 
            "text": "When an Android project is opened, MFractor needs to  index  the projects resources; this is all files and folders under  Resources\\  including layouts, menus, drawables, strings, colors etc.  When the indexing operation finishes, you might see a status message in the top toolbar:   The indexing will generate a SQL database under a folder named  .droidres ; this database contains relational information about each of the Android projects within the current solution which powers most features in MFractor for Xamarin.Android.  Each time a resource document is edited, MFractor will re-index that particular file into .droidres database.  At any time you can force a complete re-index of your solution by selecting  Tools  in the main menu and then  MFractor - Resync Solution Resources .", 
            "title": "Project Resource Indexing"
        }, 
        {
            "location": "/xamarin-android-quickstart/#resource-tooltips", 
            "text": "Hover over a resource expression to view a tooltip that lists all configurations of that resource.  C# Expression  Resource.Layout.Toolbar  Xml Expression  @+id/toolbar  For example:", 
            "title": "Resource Tooltips"
        }, 
        {
            "location": "/xamarin-android-quickstart/#go-to-resource-declaration", 
            "text": "When the caret is inside a C# or Xml resource expression, you can press  Command+D  to jump to the implementation of that resource.  When a resource has multiple configurations, a selector dialog is displayed where you can select the specific configuration to jump to:", 
            "title": "Go-To Resource Declaration"
        }, 
        {
            "location": "/xamarin-android-quickstart/#resource-intellisense", 
            "text": "", 
            "title": "Resource IntelliSense"
        }, 
        {
            "location": "/xamarin-android-quickstart/#resource-analysis", 
            "text": "", 
            "title": "Resource Analysis"
        }, 
        {
            "location": "/xamarin-android-quickstart/#find-all-resource-references", 
            "text": "", 
            "title": "Find All Resource References"
        }, 
        {
            "location": "/xamarin-android-quickstart/#c-code-analysis-for-android", 
            "text": "", 
            "title": "C# Code Analysis For Android"
        }, 
        {
            "location": "/xamarin-forms/configure-binding-context/", 
            "text": "Configuring A Binding Context\n\n\nPower the refactoring engine and xaml analyser by targeting a binding context\n\n\nIntroduction\n\n\nIn Mvvm architected applications, views use a \nBinding Context\n to display and transfer data between the application logic layer and the view layer with minimal dependencies. This is accomplished through \ndata binding\n; properties on a view are bound to properties on a backing object through binding mechanisms allowing two-way data transfer between the UI and application logic. For a full tutorial on Mvvm architecture, please Microsofts \nThe Mvvm Pattern\n article.\n\n\nWhen working with Xaml, we can specify a binding context to activate binding expression analysis and a variety of BindingContext specific refactorings.\n\n\nWe can specify a binding context \nexplicitly\n via in inline Xaml expression or \nimplicitly\n through the use of common MVVM naming conventions.\n\n\nExplicit Binding Context Resolution\n\n\nIn Xamarin.Forms, all views have the property \nBindingContext\n; this specifies the object that a view should data-bind with. When coding with Xaml, we can use the \nx:Static\n markup extension to reference a static C# property and explicitly provide an instance of a C# class as the binding context:\n\n\n \nEntry BindingContext=\n{x:Static local:MyStaticClass.MyStaticProperty}\n/\n\n\n\n\n\nThis is known as the \nView Model Locator Pattern\n. We implement a static class named \nViewModelLocator\n and use a static, readonly property to return an instance of the object we want our Xaml view to data-bind with. Historically the \nView Model Locator Pattern\n has been used to provide design time data to the Xamarin.Forms Xaml previewer. For a deeper insight into this pattern, read James Montemagnos excellent \nView Model Locator\n article.\n\n\nFor example, given a Xaml page named \nLoginPage\n, we can explicitly provide an instance of \nLoginViewModel\n as the binding context like so:\n\n\nViewModelLocator.cs\n\n\npublic namespace MyApp\n{\n  public static class ViewModelLocator\n  {\n      public static readonly LoginViewModel LoginViewModel = new LoginViewModel();\n  }\n}\n\n\n\n\nLoginPage.xaml\n\n\nContentPage\n  xmlns:local=\nclr-namespace:MyApp;assembly=MyApp\n\n  BindingContext=\n{x:Static local:ViewModelLocator.LoginViewModel}\n/\n\n\n\n\n\nWhen MFractor begins analysis on LoginPage.xaml it will check if any \nBindingContext\n properties have been assigned to. As the root \nContentPage\n assigns a binding context, it will inspect the value component of the \nBindingContext\n attribute, check if it is a Xaml expression and then evaluate it for the return type.\n\n\nFor the \n{x:Static local:ViewModelLocator.LoginViewModel}\n expression, MFractor will resolve the \nViewModelLocator\n class in the \nlocal\n namespace and then grab the C# type of the \nLoginViewModel\n property. This informs MFractor that the page will be bound to a \nLoginViewModel\n instance and therefore to analyse all \nBinding\n expressions against the \nLoginViewModel\n type.\n\n\nExplicit binding context resolution will also work when referencing another element using \nx:Reference\n expressions. For example, we can bind the on/off state of a switch to the visibility of a text label like so:\n\n\n  \nSwitch x:Name=\nmySwitch\n /\n\n  \nLabel BindingContext=\n{x:Reference mySwitch}\n IsVisible=\n{Binding IsToggled}\n/\n\n\n\n\n\nWhen MFractor analyses the \n{Binding IsToggled}\n expression, it will evaluate the \n{x:Reference mySwitch}\n expression and use the type of mySwitch as the BindingContext (Xamarin.Forms.Switch).\n\n\nImplicit Binding Context Resolution\n\n\nIn addition to explicit binding context resolution, MFractor will attempt to infer the relationship between your view models and xaml views via \nimplicit binding context resolution\n. This is done by looking for classes and Xaml views that share a common naming convention.\n\n\nLet's consider the following files:\n\n\n\n\nLoginPage.xaml\n - The xaml view.\n\n\nLoginPage.xaml.cs\n - The code behind for the xaml view.\n\n\nLoginViewModel\n - The a C# class that is the view model for the LoginPage view.\n\n\n\n\n\n\nBecause these pages share the prefix \nLogin\n and each has a distinct file extension or suffix, we can infer the following relationships:\n\n\n\n\nThe \n.xaml\n extension denotes that \nLoginPage.xaml\n is a xaml view.\n\n\nThe \n.xaml.cs\n extension and the \nLoginPage\n component denotes that \nLoginPage.xaml.cs\n is the code behind implementation \nLoginPage\n view.\n\n\nThe \nViewModel\n suffix implies that \nLoginViewModel\n is a view model. When \nViewModel\n is removed from \nLoginViewModel\n and \nPage\n is removed from \nLoginPage\n, the \nLogin\n component implies that the \nLoginViewModel\n is related to the \nLoginPage\n xaml view and it's code behind file.\n\n\n\n\nMFractor uses these common naming conventions of Page.xaml, Page.xaml.cs and ViewModel to decide that \nLoginViewModel\n will probably be the BindingContext for \nLoginPage\n. It will then\n\n\nThe following suffixes are supported for Xaml views:\n\n\n\n\nPage\n: EG LoginPage.xaml \n-\n LoginViewModel\n\n\nView\n: EG LoginView.xaml \n-\n LoginViewModel\n\n\n\n\nExplicit binding context resolution will \nalways\n override implicit binding context resolution. If your xaml views are named using the conventions listed above but your page or a view explicitly assigns the \nBindingContext\n property then MFractor will use the \nBindingContext\n return type instead of the implicit Mvvm relationship.\n\n\nData Template Binding Context Resolution\n\n\nData templates are used to provide a nested Xaml view to a view that displays many occurances of that view. For example, a ListView uses a \nDataTemplate\n to specify the view appearance of each instance provided through the \nItemsSource\n property.\n\n\nMFractor will attempt to infer the BindingContext for a data templates view by resolving the \nItemsSource\n property on the wrapping view.\n\n\nConsider the following code:\n\n\n  \nListView ItemsSource=\n{Binding Contacts}\n\n      \nListView.ItemTemplate\n\n        \nDataTemplate\n\n          \nTextCell Text=\n{Binding DisplayName}\n /\n\n        \n/DataTemplate\n\n      \n/ListView.ItemTemplate\n\n  \n/ListView\n\n\n\n\n\nThe inner \nDataTemplate\n has a \nTextCell\n where the \nText\n property is provided by the binding expression \n{Binding DisplayName}\n. To analyse this expression, MFractor requires a binding context; MFractor will walk out to the encapsulating view (ListView), locate the \nItemsSource\n property and evaluate the expression.\n\n\nWhen the return type is an \nIEnumerable\n or array, MFractor unwraps the generic or array and grabs the inner type. This provides the binding context type for the binding expressions used within the data template.\n\n\nSummary\n\n\nIn summary, we've learnt that MFractor will use the binding context to power the Xaml analyser and navigation improvements.\n\n\n\n\nBinding expressions require a binding context to be analysed.\n\n\nWe can explicitly specify a binding context by assigning the \nBindingContext\n property of any Xaml element.\n\n\nWhen we name our code files using the Page.xaml, Page.xaml.cs and ViewModel convention, MFractor will assume an implicit MVVM relationship.\n\n\nData templates use the return type of the wrapping views \nItemSource\n property.", 
            "title": "Configure Binding Context"
        }, 
        {
            "location": "/xamarin-forms/configure-binding-context/#configuring-a-binding-context", 
            "text": "Power the refactoring engine and xaml analyser by targeting a binding context", 
            "title": "Configuring A Binding Context"
        }, 
        {
            "location": "/xamarin-forms/configure-binding-context/#introduction", 
            "text": "In Mvvm architected applications, views use a  Binding Context  to display and transfer data between the application logic layer and the view layer with minimal dependencies. This is accomplished through  data binding ; properties on a view are bound to properties on a backing object through binding mechanisms allowing two-way data transfer between the UI and application logic. For a full tutorial on Mvvm architecture, please Microsofts  The Mvvm Pattern  article.  When working with Xaml, we can specify a binding context to activate binding expression analysis and a variety of BindingContext specific refactorings.  We can specify a binding context  explicitly  via in inline Xaml expression or  implicitly  through the use of common MVVM naming conventions.", 
            "title": "Introduction"
        }, 
        {
            "location": "/xamarin-forms/configure-binding-context/#explicit-binding-context-resolution", 
            "text": "In Xamarin.Forms, all views have the property  BindingContext ; this specifies the object that a view should data-bind with. When coding with Xaml, we can use the  x:Static  markup extension to reference a static C# property and explicitly provide an instance of a C# class as the binding context:    Entry BindingContext= {x:Static local:MyStaticClass.MyStaticProperty} /   This is known as the  View Model Locator Pattern . We implement a static class named  ViewModelLocator  and use a static, readonly property to return an instance of the object we want our Xaml view to data-bind with. Historically the  View Model Locator Pattern  has been used to provide design time data to the Xamarin.Forms Xaml previewer. For a deeper insight into this pattern, read James Montemagnos excellent  View Model Locator  article.  For example, given a Xaml page named  LoginPage , we can explicitly provide an instance of  LoginViewModel  as the binding context like so:  ViewModelLocator.cs  public namespace MyApp\n{\n  public static class ViewModelLocator\n  {\n      public static readonly LoginViewModel LoginViewModel = new LoginViewModel();\n  }\n}  LoginPage.xaml  ContentPage\n  xmlns:local= clr-namespace:MyApp;assembly=MyApp \n  BindingContext= {x:Static local:ViewModelLocator.LoginViewModel} /   When MFractor begins analysis on LoginPage.xaml it will check if any  BindingContext  properties have been assigned to. As the root  ContentPage  assigns a binding context, it will inspect the value component of the  BindingContext  attribute, check if it is a Xaml expression and then evaluate it for the return type.  For the  {x:Static local:ViewModelLocator.LoginViewModel}  expression, MFractor will resolve the  ViewModelLocator  class in the  local  namespace and then grab the C# type of the  LoginViewModel  property. This informs MFractor that the page will be bound to a  LoginViewModel  instance and therefore to analyse all  Binding  expressions against the  LoginViewModel  type.  Explicit binding context resolution will also work when referencing another element using  x:Reference  expressions. For example, we can bind the on/off state of a switch to the visibility of a text label like so:     Switch x:Name= mySwitch  / \n   Label BindingContext= {x:Reference mySwitch}  IsVisible= {Binding IsToggled} /   When MFractor analyses the  {Binding IsToggled}  expression, it will evaluate the  {x:Reference mySwitch}  expression and use the type of mySwitch as the BindingContext (Xamarin.Forms.Switch).", 
            "title": "Explicit Binding Context Resolution"
        }, 
        {
            "location": "/xamarin-forms/configure-binding-context/#implicit-binding-context-resolution", 
            "text": "In addition to explicit binding context resolution, MFractor will attempt to infer the relationship between your view models and xaml views via  implicit binding context resolution . This is done by looking for classes and Xaml views that share a common naming convention.  Let's consider the following files:   LoginPage.xaml  - The xaml view.  LoginPage.xaml.cs  - The code behind for the xaml view.  LoginViewModel  - The a C# class that is the view model for the LoginPage view.    Because these pages share the prefix  Login  and each has a distinct file extension or suffix, we can infer the following relationships:   The  .xaml  extension denotes that  LoginPage.xaml  is a xaml view.  The  .xaml.cs  extension and the  LoginPage  component denotes that  LoginPage.xaml.cs  is the code behind implementation  LoginPage  view.  The  ViewModel  suffix implies that  LoginViewModel  is a view model. When  ViewModel  is removed from  LoginViewModel  and  Page  is removed from  LoginPage , the  Login  component implies that the  LoginViewModel  is related to the  LoginPage  xaml view and it's code behind file.   MFractor uses these common naming conventions of Page.xaml, Page.xaml.cs and ViewModel to decide that  LoginViewModel  will probably be the BindingContext for  LoginPage . It will then  The following suffixes are supported for Xaml views:   Page : EG LoginPage.xaml  -  LoginViewModel  View : EG LoginView.xaml  -  LoginViewModel   Explicit binding context resolution will  always  override implicit binding context resolution. If your xaml views are named using the conventions listed above but your page or a view explicitly assigns the  BindingContext  property then MFractor will use the  BindingContext  return type instead of the implicit Mvvm relationship.", 
            "title": "Implicit Binding Context Resolution"
        }, 
        {
            "location": "/xamarin-forms/configure-binding-context/#data-template-binding-context-resolution", 
            "text": "Data templates are used to provide a nested Xaml view to a view that displays many occurances of that view. For example, a ListView uses a  DataTemplate  to specify the view appearance of each instance provided through the  ItemsSource  property.  MFractor will attempt to infer the BindingContext for a data templates view by resolving the  ItemsSource  property on the wrapping view.  Consider the following code:     ListView ItemsSource= {Binding Contacts} \n       ListView.ItemTemplate \n         DataTemplate \n           TextCell Text= {Binding DisplayName}  / \n         /DataTemplate \n       /ListView.ItemTemplate \n   /ListView   The inner  DataTemplate  has a  TextCell  where the  Text  property is provided by the binding expression  {Binding DisplayName} . To analyse this expression, MFractor requires a binding context; MFractor will walk out to the encapsulating view (ListView), locate the  ItemsSource  property and evaluate the expression.  When the return type is an  IEnumerable  or array, MFractor unwraps the generic or array and grabs the inner type. This provides the binding context type for the binding expressions used within the data template.", 
            "title": "Data Template Binding Context Resolution"
        }, 
        {
            "location": "/xamarin-forms/configure-binding-context/#summary", 
            "text": "In summary, we've learnt that MFractor will use the binding context to power the Xaml analyser and navigation improvements.   Binding expressions require a binding context to be analysed.  We can explicitly specify a binding context by assigning the  BindingContext  property of any Xaml element.  When we name our code files using the Page.xaml, Page.xaml.cs and ViewModel convention, MFractor will assume an implicit MVVM relationship.  Data templates use the return type of the wrapping views  ItemSource  property.", 
            "title": "Summary"
        }, 
        {
            "location": "/xamarin-forms/navigation/", 
            "text": "WORK IN PROGRESS\n\n\nNavigation\n\n\nMove efficiently through a Xamarin.Forms project with rich Xaml code navigation\n\n\nIntroduction\n\n\nMFractor enriches the navigation between C# and Xaml code by adding a few handy shortcuts. We can:\n\n\n\n\nQuickly cycle between views, code behind classes and view models with the Mvvm shortcuts.\n\n\nJump to .NET symbols from Xaml with Go-To Symbol support.\n\n\nHover over any xaml element to see a .NET tooltip along with its included documentation\n\n\nPreview images through image tooltips when we hover over an image source value.\n\n\n\n\nMvvm Navigation\n\n\nWhen MFractor can \nimplicitly resolve the View - Code Behind Class - ViewModel relationship\n, the Mvvm navigation shortcut suite is activatated.\n\n\nWe can access these shortcuts by right clicking\n\n\nXaml Go-To Symbol\n\n\nXaml Tooltips\n\n\nImage Tooltips", 
            "title": "Navigation"
        }, 
        {
            "location": "/xamarin-forms/navigation/#navigation", 
            "text": "Move efficiently through a Xamarin.Forms project with rich Xaml code navigation", 
            "title": "Navigation"
        }, 
        {
            "location": "/xamarin-forms/navigation/#introduction", 
            "text": "MFractor enriches the navigation between C# and Xaml code by adding a few handy shortcuts. We can:   Quickly cycle between views, code behind classes and view models with the Mvvm shortcuts.  Jump to .NET symbols from Xaml with Go-To Symbol support.  Hover over any xaml element to see a .NET tooltip along with its included documentation  Preview images through image tooltips when we hover over an image source value.", 
            "title": "Introduction"
        }, 
        {
            "location": "/xamarin-forms/navigation/#mvvm-navigation", 
            "text": "When MFractor can  implicitly resolve the View - Code Behind Class - ViewModel relationship , the Mvvm navigation shortcut suite is activatated.  We can access these shortcuts by right clicking", 
            "title": "Mvvm Navigation"
        }, 
        {
            "location": "/xamarin-forms/navigation/#xaml-go-to-symbol", 
            "text": "", 
            "title": "Xaml Go-To Symbol"
        }, 
        {
            "location": "/xamarin-forms/navigation/#xaml-tooltips", 
            "text": "", 
            "title": "Xaml Tooltips"
        }, 
        {
            "location": "/xamarin-forms/navigation/#image-tooltips", 
            "text": "", 
            "title": "Image Tooltips"
        }, 
        {
            "location": "/xamarin-forms/analysis/", 
            "text": "WORK IN PROGRESS\n\n\nXaml Analysis\n\n\nUse the Xaml analyser to spend less time debugging and see Xaml errors in-editor\n\n\nIntroduction\n\n\nIt's common that xaml issues in Xamarin.Forms applications are undetected until runtime or worse, when sent out to a client. MFractor solves this by detecting Xaml issues \nimmediately\n and then marking them inside the xaml editor with a concise error message.\n\n\nBye bye Xaml bugs! \ud83d\udc4b\n\n\nUnder The Hood\n\n\nLet's take a look at what happens \"under the hood\" in MFractor when you open a Xaml document:\n\n\n\n\nWhen you open a Xaml file that's part of a .NET project, Xamarin Studio notifies MFractor that a new Xaml document was opened for editing. MFractor will  inject the Xaml analyser into the Xaml editor and consume the Xaml document.\n\n\nOnce MFractor has a copy of the Xaml DOM, it \nsymbolicates\n the xaml document. In this step all Xaml nodes are resolved to their corresponding .NET class, all attributes are resolved to properties, fields or methods and all markup extension expressions are parsed.\n\n\nIt may take a little while for MFractor to parse and symbolicate the Xaml DOM the first time a solution opens. While it's consuming the Xaml document, you might see a tooltip informing you that MFractor is not quite ready to analyse the document:\n\n\n\n\nWhen the Xaml document has been parsed and symbolicated, MFractor will analyse the document for a range of code issues. Any issues that are found are marked as either\n\n\nA full list of available Xaml analysers can be found at \nXamarin.Forms Analysers\n.\n\n\nWhenever you edit a Xaml code file, MFractor will cancel any running analysis, re-parse and symbolicate the document and then re-run the xaml analyser against your xaml.\n\n\nCode Fixes\n\n\nWhen MFractor detects a code issue, it is usually able to suggest a fix as well. When MFractor can fix an issue, the squiggle beneath that issue will be yellow like so:\n\n\nYou can action this fix by right clicking on the text area marked by the yellow squiggle\n\n\nSee \nRefactoring Code Generation\n for further documentation on using Xaml to C# code generation.\n\n\nExpression Analysis\n\n\nBinding Expression Analysis", 
            "title": "Analysis"
        }, 
        {
            "location": "/xamarin-forms/analysis/#xaml-analysis", 
            "text": "Use the Xaml analyser to spend less time debugging and see Xaml errors in-editor", 
            "title": "Xaml Analysis"
        }, 
        {
            "location": "/xamarin-forms/analysis/#introduction", 
            "text": "It's common that xaml issues in Xamarin.Forms applications are undetected until runtime or worse, when sent out to a client. MFractor solves this by detecting Xaml issues  immediately  and then marking them inside the xaml editor with a concise error message.  Bye bye Xaml bugs! \ud83d\udc4b", 
            "title": "Introduction"
        }, 
        {
            "location": "/xamarin-forms/analysis/#under-the-hood", 
            "text": "Let's take a look at what happens \"under the hood\" in MFractor when you open a Xaml document:   When you open a Xaml file that's part of a .NET project, Xamarin Studio notifies MFractor that a new Xaml document was opened for editing. MFractor will  inject the Xaml analyser into the Xaml editor and consume the Xaml document.  Once MFractor has a copy of the Xaml DOM, it  symbolicates  the xaml document. In this step all Xaml nodes are resolved to their corresponding .NET class, all attributes are resolved to properties, fields or methods and all markup extension expressions are parsed.  It may take a little while for MFractor to parse and symbolicate the Xaml DOM the first time a solution opens. While it's consuming the Xaml document, you might see a tooltip informing you that MFractor is not quite ready to analyse the document:   When the Xaml document has been parsed and symbolicated, MFractor will analyse the document for a range of code issues. Any issues that are found are marked as either  A full list of available Xaml analysers can be found at  Xamarin.Forms Analysers .  Whenever you edit a Xaml code file, MFractor will cancel any running analysis, re-parse and symbolicate the document and then re-run the xaml analyser against your xaml.", 
            "title": "Under The Hood"
        }, 
        {
            "location": "/xamarin-forms/analysis/#code-fixes", 
            "text": "When MFractor detects a code issue, it is usually able to suggest a fix as well. When MFractor can fix an issue, the squiggle beneath that issue will be yellow like so:  You can action this fix by right clicking on the text area marked by the yellow squiggle  See  Refactoring Code Generation  for further documentation on using Xaml to C# code generation.", 
            "title": "Code Fixes"
        }, 
        {
            "location": "/xamarin-forms/analysis/#expression-analysis", 
            "text": "", 
            "title": "Expression Analysis"
        }, 
        {
            "location": "/xamarin-forms/analysis/#binding-expression-analysis", 
            "text": "", 
            "title": "Binding Expression Analysis"
        }, 
        {
            "location": "/xamarin-forms/refactoring-and-code-generation/", 
            "text": "WORK IN PROGRESS\n\n\nRefactoring And Code Generation\n\n\nGenerate C# code from Xaml in just a few clicks\n\n\nIntroduction\n\n\nFor a full list of available refactoring and code generation actions, see the \nTools In-Depth - Refactoring\n article.\n\n\nFixing Code Issues\n\n\nImplementing A ViewModel\n\n\nImplementing Missing Bindings\n\n\nGenerating Missing Classes\n\n\nGenerating Views\n\n\nGenerating Bindable Properties", 
            "title": "Refactoring And Code Generation"
        }, 
        {
            "location": "/xamarin-forms/refactoring-and-code-generation/#refactoring-and-code-generation", 
            "text": "Generate C# code from Xaml in just a few clicks", 
            "title": "Refactoring And Code Generation"
        }, 
        {
            "location": "/xamarin-forms/refactoring-and-code-generation/#introduction", 
            "text": "For a full list of available refactoring and code generation actions, see the  Tools In-Depth - Refactoring  article.", 
            "title": "Introduction"
        }, 
        {
            "location": "/xamarin-forms/refactoring-and-code-generation/#fixing-code-issues", 
            "text": "", 
            "title": "Fixing Code Issues"
        }, 
        {
            "location": "/xamarin-forms/refactoring-and-code-generation/#implementing-a-viewmodel", 
            "text": "", 
            "title": "Implementing A ViewModel"
        }, 
        {
            "location": "/xamarin-forms/refactoring-and-code-generation/#implementing-missing-bindings", 
            "text": "", 
            "title": "Implementing Missing Bindings"
        }, 
        {
            "location": "/xamarin-forms/refactoring-and-code-generation/#generating-missing-classes", 
            "text": "", 
            "title": "Generating Missing Classes"
        }, 
        {
            "location": "/xamarin-forms/refactoring-and-code-generation/#generating-views", 
            "text": "", 
            "title": "Generating Views"
        }, 
        {
            "location": "/xamarin-forms/refactoring-and-code-generation/#generating-bindable-properties", 
            "text": "", 
            "title": "Generating Bindable Properties"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/", 
            "text": "Xamarin.Forms Xaml Analysis\n\n\nA complete list of all Xaml analysers in MFractor for Xamarin.Forms - 41 analysers\n\n\n(Autogenerated by MFractor v2.7.0.0)\n\n\nAttribute Maps To Member In Parent Type\n\n\nChecks that an attribute resolves to a member within its parent type.\n\n\nAvailable Fixes\n\n\n\n\nGenerate property onto parent type\n: This fix generates a property with a getter and setter onto the parent type.\n\n\nGenerate bindable property on type\n: This fix generates a bindable property onto the targetted .\n\n\nReplace attribute with closely named member\n: Looks for members on a C# class that are named closely to an unresolved xml attribute and then suggest near matches.\n\n\n\n\nBinding Expressions Resolve\n\n\nInspects binding expressions and validates that the symbol referred to in the binding context exists. This analyser requires an explict or implicit binding context to be present for the document.\n\n\nAvailable Fixes\n\n\n\n\nAutocorrect property | Generate property\n: When the symbol referenced inside a binding expression is unresolved, this fix can either apply an auto-correcet or generate a property on elements the BindingContext\n\n\n\n\nCheck C# symbosl inside xaml expressions resolve\n\n\nInspects a .net symbol reference (eg local:MyClass.MyProperty) and validates that the symbol portion ('MyClass.MyProerty') resolves to a .NET symbol within the current project and it's references.\n\n\nAvailable Fixes\n\n\n\n\nAutocorrect class or property\n: When a c# symbol reference expression does not resolve, this fix applies an auto-corrected suggestion from the class/property.\n\n\nGenerate class and static member\n: When a c# symbol reference expression does not resolve, this fix generates a stub class declaration with a default, readonly static member.\n\n\nGenerate class\n: When a c# symbol reference expression does not resolve, this fix generates an implementation for the missing class.\n\n\nGenerate property\n: Generate a static or constant variable onto the targetted class\n\n\n\n\nCheck namespaces inside xaml expressions resolve\n\n\nInspects a .net symbol reference (eg local:MyClass.MyProperty) and validates that the namespace portion ('local') resolves to a xmlns declaration in the current document.\n\n\nAvailable Fixes\n\n\n\n\nImport namespace and assembly\n: When the namespace inside c# symbol reference expression can be resolved to a .NET symbol in the project or its references this fix generates an 'xmlns' import statement in the root xaml element.\n\n\n\n\nCheck Root Element Defines Code Behind Class\n\n\nChecks that the root xaml node defines a code behind class using the 'x:Class' directive\n\n\nCheck Xaml Nodes Is Not Abstract\n\n\nChecks that an xml node resolves to a non-abstract, concrete class implementation.\n\n\nCheck Xaml Nodes Resolve\n\n\nChecks that xml nodes map to a .NET symbol and can be either compiled or inflated.\n\n\nAvailable Fixes\n\n\n\n\nGenerate Missing Value Converter\n: When a Xaml node cannot be resolved and it ends with '[cC]onverter', this fix will create a new implemenation of IValueConverter.\n\n\nGenerate Missing View\n: When a Xaml node cannot be resolved, this fix will create a new implemenation of that class deriving from 'Xamarin.Forms.View'.\n\n\nGenerate Missing Class\n: When a Xaml node cannot be resolved, this fix will create a new implementation of that class.\n\n\nReplace node with auto-corrected match\n: This fix action replaces a mispelt xaml node that can be resolved in an assembly with its correct .NET symbol name.\n\n\n\n\nClass does not have attached property\n\n\nChecks that attached properties (for example 'Grid.Row') exist in the class that they are attempting to use.\n\n\nAvailable Fixes\n\n\n\n\nReplace with correct attached property name\n: Replaces an incorrect attached property with an auto-corrected value.\n\n\n\n\nDuplicate AutomationIds\n\n\nInspects a Xaml document for duplicate AutomationId's\n\n\nDuplicate Code Behind Field Declarations\n\n\nChecks that the value assigned to an x:Name attribute for a Xaml element is unique within the scope of the document.\n\n\nDuplicate resource dictionary keys\n\n\nValidates the each resource entry within a resource dictionary has a unique key\n\n\nEvent Handler Exists In Code Behind Class\n\n\nChecks that an event callback reference as an attribute value within a xaml document exists in the code behind class.\n\n\nAvailable Fixes\n\n\n\n\nGenerate event handler method\n: Generates a method body for an event handler that does not exist in the xaml files code-behind class.\n\n\n\n\nEvent Handler Signature Matches\n\n\nChecks that the signature for the event callback in a code behind class matches the expected signature for the property it is assigned to.\n\n\nFind x:TypeArguments misuse\n\n\nInspects for usages of x:TypeArguments on elements that look like they resolve to non-generic classes\n\n\nGeneric has x:TypeArguments supplied.\n\n\nInspects generic classes being instantiated through Xaml and validates that an x:TypeArguments attribute or property assignment node is present.\n\n\nAvailable Fixes\n\n\n\n\nCreate x:TypeArguments attribute.\n: Generates an x:TypeArguments attribute, resolving the potential argument types if possible.\n\n\nCreate x:TypeArguments property setter\n: Generates a child 'x:TypeArguments' property setter node, resolving the potential argument types if possible.\n\n\n\n\nObsolete Property Used\n\n\nChecks for attributes that are marked as obsolete/deprecated.\n\n\nOnIdiom Return Type Mismatch\n\n\nChecks the type returned by a Xamarin.Forms.OnIdiom element is valid with the parent property type\n\n\nOnPlatform Return Type Mismatch\n\n\nChecks the type returned by a Xamarin.Forms.OnPlatform element is valid with the parent property type\n\n\nProperty Node Maps To Member In Parent Type\n\n\nChecks that a property node resolves to a member within its parent type.\n\n\nProperty Setter Attribute Has Value\n\n\nChecks that a value has been provided to an attribute Property. This check is skipped if the property type is a string or a valueconverter is in use.\n\n\nProperty Setter Attribute Has Value\n\n\nChecks that a value has been provided to a node Property setter (MyClass.MyProperty).\n\n\nProperty Setter Node Misuse\n\n\nInspects for property setters that don't apply to the outer class. For example, if a developer used OnIdiom.Phone inside a OnPlatform element, the OnIdiom.Phone property setter makes no sense within the given context.\n\n\nProperty Setter Type Mismatch\n\n\nWhen using MyClass.MyProperty node setter syntax, validate that the inner child node returns a .NET object of the correct type for the property.\n\n\nResource entry does not define a key\n\n\nValidates the elements provided to a resource dictionary supply an x:Key attribute\n\n\nAvailable Fixes\n\n\n\n\nRemove unused xmlns declaration\n: Removes the unused xmlns declaration.\n\n\n\n\nUndefined Static Resource Usage\n\n\nValidates that a static resource lookup resolves to a resource defined in the xaml file.\n\n\nAvailable Fixes\n\n\n\n\nAutocorrect static resource reference\n: When a static resource reference does not exist in the current document but a closely named symbol exists, this fix allows \n\n\n\n\nUnknown Static Property Value\n\n\nChecks that the literal value provided to xml attributes which accept a class object maps to a static property or field in the class type. For example, the LayoutOptions class has static fields such as Fill or CentreAndExpand that can be used a literal attribute values. If CentreAndFill was provided, this analyser would inspect 'LayoutOptions' for a static field named 'CentreAndFill' and trigger an analysis error when it couldn't be found.\n\n\nAvailable Fixes\n\n\n\n\nReplace unknown property value with autocorrection\n: When a xaml element property attempts to reference a static field (for instance LayoutOptions.Center), this fix finds the nearest named member and replaces the incorrect value with an auto-correction.\n\n\n\n\nUnknown type provided to generic\n\n\nInspects usages of x:TypeArguments and validates that the type provided exists\n\n\nUnused Code Behind Field\n\n\nChecks that a code behind field declaration (x:Name) is used within the project in either C# or Xaml.\n\n\nValidate Binding Expression Return Type\n\n\nValidates that the .NET symbol returned by a binding expression matches the expected type for the property.\n\n\nValidate Binding Expressions Return A Property\n\n\nEvaluates a binding expression and validates that it points to property within the binding context.\n\n\nAvailable Fixes\n\n\n\n\nReplace field or method reference with property.\n: Replaces a field or method symbol within a binding expression with a suggested property name.\n\n\n\n\nValidate StaticResource Return Type\n\n\nValidates that the symbol returned by an StaticResource matches the expected type for the property.\n\n\nValidate Value Types\n\n\nInspects the input provided to attributes that expect value types (int, bool, double etc) and validates that the input is valid.\n\n\nValidate x:Static return type\n\n\nValidates that the .NET symbol returned by an x:Static matches the expected type for the property.\n\n\nValidate xmlns declarations are used.\n\n\nValidates that an xmlns attribute that declares a namespace and assembly is used within the current document.\n\n\nAvailable Fixes\n\n\n\n\nRemove unused xmlns declaration\n: Removes the unused xmlns declaration.\n\n\n\n\nValue Converter Input Type Mismatch\n\n\nInspects the Converter property of a Binding expression and validates that the input type is correct.\n\n\nValue Converter Output Type Mismatch\n\n\nThe Converter component of a Binding expression and validates that the returned output type is valid for the parent attribute.\n\n\nx:Name Has Invalid Characters\n\n\nChecks that x:Name expressions define a valid code-behind variable name. An value declared by an x:Name attribute must start with a @, _ or a-Z character followed by underscores or alpha-numeric characters.\n\n\nx:Reference element exists\n\n\nChecks that the element referenced by a 'x:Reference' xaml expression exists within the current document.\n\n\nAvailable Fixes\n\n\n\n\nReplace x:Name with closely named member\n: Replaces an invalid x:Name reference with a similiarly named x:Name declared in the current document.\n\n\n\n\nXml Namespace Does Not Resolve\n\n\nChecks that the namespace used on the xml nodes is defined within the current document.\n\n\nAvailable Fixes\n\n\n\n\nImport namespace and assembly\n: When an xaml node can be resolved to a .NET symbol in the project or its references this fix generates an 'xmlns' import statement in the root xaml element.\n\n\nReplace xml namespace with auto-correction\n: Replaces an xml namespace prefix with the auto-corrected xml namespace.\n\n\n\n\nXmlns Assembly Does Not Resolve\n\n\nChecks that the 'assembly' component of an xmlns statement resolves to an assembly referenced by the project.\n\n\nXmlns declaration is malformed\n\n\nVerifies that a 'xmlns' attribute has both a clr-namespace and an assembly component", 
            "title": "Analysers"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#xamarinforms-xaml-analysis", 
            "text": "A complete list of all Xaml analysers in MFractor for Xamarin.Forms - 41 analysers  (Autogenerated by MFractor v2.7.0.0)", 
            "title": "Xamarin.Forms Xaml Analysis"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#attribute-maps-to-member-in-parent-type", 
            "text": "Checks that an attribute resolves to a member within its parent type.  Available Fixes   Generate property onto parent type : This fix generates a property with a getter and setter onto the parent type.  Generate bindable property on type : This fix generates a bindable property onto the targetted .  Replace attribute with closely named member : Looks for members on a C# class that are named closely to an unresolved xml attribute and then suggest near matches.", 
            "title": "Attribute Maps To Member In Parent Type"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#binding-expressions-resolve", 
            "text": "Inspects binding expressions and validates that the symbol referred to in the binding context exists. This analyser requires an explict or implicit binding context to be present for the document.  Available Fixes   Autocorrect property | Generate property : When the symbol referenced inside a binding expression is unresolved, this fix can either apply an auto-correcet or generate a property on elements the BindingContext", 
            "title": "Binding Expressions Resolve"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#check-c-symbosl-inside-xaml-expressions-resolve", 
            "text": "Inspects a .net symbol reference (eg local:MyClass.MyProperty) and validates that the symbol portion ('MyClass.MyProerty') resolves to a .NET symbol within the current project and it's references.  Available Fixes   Autocorrect class or property : When a c# symbol reference expression does not resolve, this fix applies an auto-corrected suggestion from the class/property.  Generate class and static member : When a c# symbol reference expression does not resolve, this fix generates a stub class declaration with a default, readonly static member.  Generate class : When a c# symbol reference expression does not resolve, this fix generates an implementation for the missing class.  Generate property : Generate a static or constant variable onto the targetted class", 
            "title": "Check C# symbosl inside xaml expressions resolve"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#check-namespaces-inside-xaml-expressions-resolve", 
            "text": "Inspects a .net symbol reference (eg local:MyClass.MyProperty) and validates that the namespace portion ('local') resolves to a xmlns declaration in the current document.  Available Fixes   Import namespace and assembly : When the namespace inside c# symbol reference expression can be resolved to a .NET symbol in the project or its references this fix generates an 'xmlns' import statement in the root xaml element.", 
            "title": "Check namespaces inside xaml expressions resolve"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#check-root-element-defines-code-behind-class", 
            "text": "Checks that the root xaml node defines a code behind class using the 'x:Class' directive", 
            "title": "Check Root Element Defines Code Behind Class"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#check-xaml-nodes-is-not-abstract", 
            "text": "Checks that an xml node resolves to a non-abstract, concrete class implementation.", 
            "title": "Check Xaml Nodes Is Not Abstract"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#check-xaml-nodes-resolve", 
            "text": "Checks that xml nodes map to a .NET symbol and can be either compiled or inflated.  Available Fixes   Generate Missing Value Converter : When a Xaml node cannot be resolved and it ends with '[cC]onverter', this fix will create a new implemenation of IValueConverter.  Generate Missing View : When a Xaml node cannot be resolved, this fix will create a new implemenation of that class deriving from 'Xamarin.Forms.View'.  Generate Missing Class : When a Xaml node cannot be resolved, this fix will create a new implementation of that class.  Replace node with auto-corrected match : This fix action replaces a mispelt xaml node that can be resolved in an assembly with its correct .NET symbol name.", 
            "title": "Check Xaml Nodes Resolve"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#class-does-not-have-attached-property", 
            "text": "Checks that attached properties (for example 'Grid.Row') exist in the class that they are attempting to use.  Available Fixes   Replace with correct attached property name : Replaces an incorrect attached property with an auto-corrected value.", 
            "title": "Class does not have attached property"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#duplicate-automationids", 
            "text": "Inspects a Xaml document for duplicate AutomationId's", 
            "title": "Duplicate AutomationIds"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#duplicate-code-behind-field-declarations", 
            "text": "Checks that the value assigned to an x:Name attribute for a Xaml element is unique within the scope of the document.", 
            "title": "Duplicate Code Behind Field Declarations"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#duplicate-resource-dictionary-keys", 
            "text": "Validates the each resource entry within a resource dictionary has a unique key", 
            "title": "Duplicate resource dictionary keys"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#event-handler-exists-in-code-behind-class", 
            "text": "Checks that an event callback reference as an attribute value within a xaml document exists in the code behind class.  Available Fixes   Generate event handler method : Generates a method body for an event handler that does not exist in the xaml files code-behind class.", 
            "title": "Event Handler Exists In Code Behind Class"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#event-handler-signature-matches", 
            "text": "Checks that the signature for the event callback in a code behind class matches the expected signature for the property it is assigned to.", 
            "title": "Event Handler Signature Matches"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#find-xtypearguments-misuse", 
            "text": "Inspects for usages of x:TypeArguments on elements that look like they resolve to non-generic classes", 
            "title": "Find x:TypeArguments misuse"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#generic-has-xtypearguments-supplied", 
            "text": "Inspects generic classes being instantiated through Xaml and validates that an x:TypeArguments attribute or property assignment node is present.  Available Fixes   Create x:TypeArguments attribute. : Generates an x:TypeArguments attribute, resolving the potential argument types if possible.  Create x:TypeArguments property setter : Generates a child 'x:TypeArguments' property setter node, resolving the potential argument types if possible.", 
            "title": "Generic has x:TypeArguments supplied."
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#obsolete-property-used", 
            "text": "Checks for attributes that are marked as obsolete/deprecated.", 
            "title": "Obsolete Property Used"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#onidiom-return-type-mismatch", 
            "text": "Checks the type returned by a Xamarin.Forms.OnIdiom element is valid with the parent property type", 
            "title": "OnIdiom Return Type Mismatch"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#onplatform-return-type-mismatch", 
            "text": "Checks the type returned by a Xamarin.Forms.OnPlatform element is valid with the parent property type", 
            "title": "OnPlatform Return Type Mismatch"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#property-node-maps-to-member-in-parent-type", 
            "text": "Checks that a property node resolves to a member within its parent type.", 
            "title": "Property Node Maps To Member In Parent Type"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#property-setter-attribute-has-value", 
            "text": "Checks that a value has been provided to an attribute Property. This check is skipped if the property type is a string or a valueconverter is in use.", 
            "title": "Property Setter Attribute Has Value"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#property-setter-attribute-has-value_1", 
            "text": "Checks that a value has been provided to a node Property setter (MyClass.MyProperty).", 
            "title": "Property Setter Attribute Has Value"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#property-setter-node-misuse", 
            "text": "Inspects for property setters that don't apply to the outer class. For example, if a developer used OnIdiom.Phone inside a OnPlatform element, the OnIdiom.Phone property setter makes no sense within the given context.", 
            "title": "Property Setter Node Misuse"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#property-setter-type-mismatch", 
            "text": "When using MyClass.MyProperty node setter syntax, validate that the inner child node returns a .NET object of the correct type for the property.", 
            "title": "Property Setter Type Mismatch"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#resource-entry-does-not-define-a-key", 
            "text": "Validates the elements provided to a resource dictionary supply an x:Key attribute  Available Fixes   Remove unused xmlns declaration : Removes the unused xmlns declaration.", 
            "title": "Resource entry does not define a key"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#undefined-static-resource-usage", 
            "text": "Validates that a static resource lookup resolves to a resource defined in the xaml file.  Available Fixes   Autocorrect static resource reference : When a static resource reference does not exist in the current document but a closely named symbol exists, this fix allows", 
            "title": "Undefined Static Resource Usage"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#unknown-static-property-value", 
            "text": "Checks that the literal value provided to xml attributes which accept a class object maps to a static property or field in the class type. For example, the LayoutOptions class has static fields such as Fill or CentreAndExpand that can be used a literal attribute values. If CentreAndFill was provided, this analyser would inspect 'LayoutOptions' for a static field named 'CentreAndFill' and trigger an analysis error when it couldn't be found.  Available Fixes   Replace unknown property value with autocorrection : When a xaml element property attempts to reference a static field (for instance LayoutOptions.Center), this fix finds the nearest named member and replaces the incorrect value with an auto-correction.", 
            "title": "Unknown Static Property Value"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#unknown-type-provided-to-generic", 
            "text": "Inspects usages of x:TypeArguments and validates that the type provided exists", 
            "title": "Unknown type provided to generic"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#unused-code-behind-field", 
            "text": "Checks that a code behind field declaration (x:Name) is used within the project in either C# or Xaml.", 
            "title": "Unused Code Behind Field"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#validate-binding-expression-return-type", 
            "text": "Validates that the .NET symbol returned by a binding expression matches the expected type for the property.", 
            "title": "Validate Binding Expression Return Type"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#validate-binding-expressions-return-a-property", 
            "text": "Evaluates a binding expression and validates that it points to property within the binding context.  Available Fixes   Replace field or method reference with property. : Replaces a field or method symbol within a binding expression with a suggested property name.", 
            "title": "Validate Binding Expressions Return A Property"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#validate-staticresource-return-type", 
            "text": "Validates that the symbol returned by an StaticResource matches the expected type for the property.", 
            "title": "Validate StaticResource Return Type"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#validate-value-types", 
            "text": "Inspects the input provided to attributes that expect value types (int, bool, double etc) and validates that the input is valid.", 
            "title": "Validate Value Types"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#validate-xstatic-return-type", 
            "text": "Validates that the .NET symbol returned by an x:Static matches the expected type for the property.", 
            "title": "Validate x:Static return type"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#validate-xmlns-declarations-are-used", 
            "text": "Validates that an xmlns attribute that declares a namespace and assembly is used within the current document.  Available Fixes   Remove unused xmlns declaration : Removes the unused xmlns declaration.", 
            "title": "Validate xmlns declarations are used."
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#value-converter-input-type-mismatch", 
            "text": "Inspects the Converter property of a Binding expression and validates that the input type is correct.", 
            "title": "Value Converter Input Type Mismatch"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#value-converter-output-type-mismatch", 
            "text": "The Converter component of a Binding expression and validates that the returned output type is valid for the parent attribute.", 
            "title": "Value Converter Output Type Mismatch"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#xname-has-invalid-characters", 
            "text": "Checks that x:Name expressions define a valid code-behind variable name. An value declared by an x:Name attribute must start with a @, _ or a-Z character followed by underscores or alpha-numeric characters.", 
            "title": "x:Name Has Invalid Characters"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#xreference-element-exists", 
            "text": "Checks that the element referenced by a 'x:Reference' xaml expression exists within the current document.  Available Fixes   Replace x:Name with closely named member : Replaces an invalid x:Name reference with a similiarly named x:Name declared in the current document.", 
            "title": "x:Reference element exists"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#xml-namespace-does-not-resolve", 
            "text": "Checks that the namespace used on the xml nodes is defined within the current document.  Available Fixes   Import namespace and assembly : When an xaml node can be resolved to a .NET symbol in the project or its references this fix generates an 'xmlns' import statement in the root xaml element.  Replace xml namespace with auto-correction : Replaces an xml namespace prefix with the auto-corrected xml namespace.", 
            "title": "Xml Namespace Does Not Resolve"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#xmlns-assembly-does-not-resolve", 
            "text": "Checks that the 'assembly' component of an xmlns statement resolves to an assembly referenced by the project.", 
            "title": "Xmlns Assembly Does Not Resolve"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/analysers/#xmlns-declaration-is-malformed", 
            "text": "Verifies that a 'xmlns' attribute has both a clr-namespace and an assembly component", 
            "title": "Xmlns declaration is malformed"
        }, 
        {
            "location": "/xamarin-forms/tools-in-depth/refactorings/", 
            "text": "", 
            "title": "Refactorings"
        }, 
        {
            "location": "/xamarin-android/project-resource-indexing/", 
            "text": "WORK IN PROGRESS", 
            "title": "Project Resource Indexing"
        }, 
        {
            "location": "/xamarin-android/navigation/", 
            "text": "WORK IN PROGRESS\n\n\nNavigation\n\n\nExplore Android projects in a snap with resource tooltips and navigation shortcuts\n\n\nIntroduction", 
            "title": "Navigation"
        }, 
        {
            "location": "/xamarin-android/navigation/#navigation", 
            "text": "Explore Android projects in a snap with resource tooltips and navigation shortcuts", 
            "title": "Navigation"
        }, 
        {
            "location": "/xamarin-android/navigation/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/xamarin-android/analysis/", 
            "text": "WORK IN PROGRESS", 
            "title": "Analysis"
        }, 
        {
            "location": "/xamarin-android/refactoring-and-code-generation/", 
            "text": "WORK IN PROGRESS", 
            "title": "Refactoring And Code Generation"
        }, 
        {
            "location": "/xamarin-android/dotnet-code-analysis/", 
            "text": "WORK IN PROGRESS", 
            "title": ".NET Code Analysis"
        }, 
        {
            "location": "/xamarin-android/resource-intellisense/", 
            "text": "WORK IN PROGRESS\n\n\nResource IntelliSense\n\n\nBuilding Android resource files such as values, menus, drawables or layouts using resource code completion\n\n\nIntroduction", 
            "title": "Resource IntelliSense"
        }, 
        {
            "location": "/xamarin-android/resource-intellisense/#resource-intellisense", 
            "text": "Building Android resource files such as values, menus, drawables or layouts using resource code completion", 
            "title": "Resource IntelliSense"
        }, 
        {
            "location": "/xamarin-android/resource-intellisense/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/", 
            "text": "Xamarin.Android Resource Analysis\n\n\nA complete list of all resource analysers in MFractor for Xamarin.Android - 32 analysers\n\n\n(Autogenerated by MFractor v2.7.0.0)\n\n\nAppWidget Layout Is Valid\n\n\nAnalyses the layout file referenced by the 'android:initialLayout' attribute for an AppWidget configuration and ensures that it only contains allowed view types.\n\n\nCheck for Duplicate Attributes.\n\n\nChecks for duplicate attributes on an xml node and then automatically removes the duplicates.\n\n\nAvailable Fixes\n\n\n\n\nFix Duplicate Attributes\n: Removes any duplicate attributes for an Xml node element.\n\n\n\n\nCheck For Invalid Android Xml Elements\n\n\nInspects an xml file for unknown elements. For example, a res/menu xml file may only contain 'menu', 'item' and 'group' elements.\n\n\nCheck For Invalid Characters In Value Resource Names\n\n\nChecks that the 'name' attribute for value based resources do not contain invalid characters. Any character apart for 0-9, a-z, A-Z, '.' and '_' are considered to be an invalid character. This check prevents characters that are also operators (such as +, * or \n) from being baked into the Resource.Designer.cs file when the resource ids are generated.\n\n\nCheck For Required Value\n\n\nChecks that the input argument for an XML attribute matches the required value for that attribute. For example, 'xmlns:android' must always be 'http://schemas.android.com/apk/res/android'.\n\n\nAvailable Fixes\n\n\n\n\nApply Required Value\n: Replaces an attributes value with the required value for xml element. For example, 'xmlns:android' must always be 'http://schemas.android.com/apk/res/android'.\n\n\n\n\nCheck NFC Tech-List for whitespace\n\n\nLooks at the 'tech' elements inside an nfc 'tech-list' definition and verifies that they do not containi whitespace. The loader for tech-list elements is very strict and will cause a runtime exception when this tech-list is used. See https://code.google.com/p/android/issues/detail?id=65351\n\n\nCheck Public Android Resource Usage\n\n\nInspects Android resource usages and ensure that the resource referenced has been declared as public.\n\n\nCheck Reference Type\n\n\nVerifies that an attribute that expects a resource reference is provided a reference expression (@type/value) rather than a literal value.\n\n\nCircular Resource Usage\n\n\nDetects when a resource usage (@type/value) that points to a file based resource (such as a layout or drawable) will generate a circular reference when it is inflated. A common example of this is using \ninclude\n or \nmerge\n tags inside a layout that also references other layouts via merging or including.\n\n\nClass Reference Exists\n\n\nChecks that a DotNet class referenced in xml exists in the current solution and its references.\n\n\nAvailable Fixes\n\n\n\n\nCorrect Unknown Class Reference\n: Replaces an invalid class reference with one that is closely named.\n\n\n\n\nDeclarative ID In Style\n\n\nDefining a style which sets android:id to a dynamically generated id can cause many versions of aapt, the resource packaging tool, to crash. To work around this, declare the id explicitly with \nitem type=\"id\" name=\"...\" /\n instead.\n\n\nDetect Duplicate Plurals Entries\n\n\nInspects a 'plurals' resource entry for 'item' elements that have the same 'quantity' value.\n\n\nDetect Resource Self Reference\n\n\nAnalyses resources usages to detect when a usage attempts to reference itself. This error is most likely to occur when using animations, drawables and particularly for layout includes.\n\n\nDrawable 9-patch reference check.\n\n\nChecks that a drawable reference does not end with '.9'.\n\n\nAvailable Fixes\n\n\n\n\nFix 9-patch drawable references\n: Replaces a nine patch drawable reference that includes the '.9' suffix with a reference that excludes the '.9' suffix.\n\n\n\n\nInconsistent Array Sizes\n\n\nChecks that 'array', 'string-array' and 'integer-array' resources with multiple declarations all have the same number of elements across all locales they are declared in.\n\n\nItem Value Resource Is Valid\n\n\nChecks that the content contained within an \n tag that declares a value resource declaration is a valid format for its type.\n\n\nLayout \n exists in configuration\n\n\nChecks that usages of 'include' tags within a Android layout reference a layout that is available within the current configuration.\n\n\nLayout Width And Height Required\n\n\nChecks that layout elements have both the 'android:layout_width' and 'android:layout_height' attributes declared. Elements that are missing these attributes will generate a runtime exception when the layout is inflated.\n\n\nMispelt Resource Type References\n\n\nChecks that the resource references (EG: @string/myString) have a valid resource type component and suggests an auto-correction if possible.\n\n\nAvailable Fixes\n\n\n\n\nFix Mispelt Resource Usages\n: Replaces unresolvable resource usages with an auto-suggested value based on the resources available in the project or its references.\n\n\n\n\nMultiple \n usages in manifest\n\n\nInspects the \n element within the Android manifest for multiple declarations of the \n element. Only a single \n element is allowed.\n\n\nNode Missing Required Attributes\n\n\nChecks that a given resource node has all the mandatory attributes.\n\n\nAvailable Fixes\n\n\n\n\nAdd Required Attributes\n: Adds any missing required attributes and their default values to an xml node.\n\n\n\n\nResource Value Format\n\n\nValidates that a resource value (such as a dimension, color or percentage) is entered in the correct format.\n\n\nAvailable Fixes\n\n\n\n\nFix Value Format\n: Fixes typeos for inline values such as dimensions, color or floats.\n\n\n\n\nScroll View Has Multiple Children\n\n\nVerifies that a ScrollView only has 1 direct child; multiple children will cause a runtime exception when the layout is inflated. If you want more children, encapsulate the child elements into a layout container.\n\n\nTextView 'textSize' uses non-sp dimension\n\n\nInspects 'textSize' attributes for usages of non-sp dimensions\n\n\nValid Keyword Input\n\n\nValidates that a keyword or sequence of flags provided to an xml attribute are valid. For instance, the installation location is doen by the 'android:installLocation' manifest attribute. This attribute only accepts 'internalOnly', 'auto' and 'preferExternal', any other value is a compilation error.\n\n\nAvailable Fixes\n\n\n\n\nFix Keywords\n: Replaces a mispelt keyword with an auto-corrected suggestion or suggests from a list of valid keywords.\n\n\n\n\nValidate Animated Vectors Reference Vector Drawables\n\n\nVerifies that the 'android:drawable' attribute on an 'animated-vector' drawable resource points to a 'vector' base drawable.\n\n\nValidate Flag Input\n\n\nValidates that any flags provided to an xml attribute are valid.\n\n\nAvailable Fixes\n\n\n\n\nFix Flags\n: Replaces a mispelt flag with an auto-corrected suggestion or suggests from a list of valid keywords.\n\n\n\n\nValidate quotations in \n elements.\n\n\nVerifies that quotation marks (' and \") are properly escaped when inside a string resource. For instance, single quotes (') must be escaped by a preceeding '\\' unless the whole string is wrapped within double quotes (\"). Furthermore, the use of double quotes must be escaped unless they enclose the entire string.\n\n\nValues Resource Is Valid\n\n\nChecks that the content contained within a value resource declaration is a valid format for its type.\n\n\nVerify Input Type\n\n\nChecks that a xml attribute accepts the resource type used in a reference expression (EG: @string/myString).\n\n\nVerify Max API Feature Usages\n\n\nChecks that xml resources use Android SDK features that are within the projects Target API level.\n\n\nVerify Resource Exists\n\n\nChecks that a resource used via a reference expression (EG: @string/myString) exists within the project or its references.", 
            "title": "Analysers"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#xamarinandroid-resource-analysis", 
            "text": "A complete list of all resource analysers in MFractor for Xamarin.Android - 32 analysers  (Autogenerated by MFractor v2.7.0.0)", 
            "title": "Xamarin.Android Resource Analysis"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#appwidget-layout-is-valid", 
            "text": "Analyses the layout file referenced by the 'android:initialLayout' attribute for an AppWidget configuration and ensures that it only contains allowed view types.", 
            "title": "AppWidget Layout Is Valid"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#check-for-duplicate-attributes", 
            "text": "Checks for duplicate attributes on an xml node and then automatically removes the duplicates.  Available Fixes   Fix Duplicate Attributes : Removes any duplicate attributes for an Xml node element.", 
            "title": "Check for Duplicate Attributes."
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#check-for-invalid-android-xml-elements", 
            "text": "Inspects an xml file for unknown elements. For example, a res/menu xml file may only contain 'menu', 'item' and 'group' elements.", 
            "title": "Check For Invalid Android Xml Elements"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#check-for-invalid-characters-in-value-resource-names", 
            "text": "Checks that the 'name' attribute for value based resources do not contain invalid characters. Any character apart for 0-9, a-z, A-Z, '.' and '_' are considered to be an invalid character. This check prevents characters that are also operators (such as +, * or  ) from being baked into the Resource.Designer.cs file when the resource ids are generated.", 
            "title": "Check For Invalid Characters In Value Resource Names"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#check-for-required-value", 
            "text": "Checks that the input argument for an XML attribute matches the required value for that attribute. For example, 'xmlns:android' must always be 'http://schemas.android.com/apk/res/android'.  Available Fixes   Apply Required Value : Replaces an attributes value with the required value for xml element. For example, 'xmlns:android' must always be 'http://schemas.android.com/apk/res/android'.", 
            "title": "Check For Required Value"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#check-nfc-tech-list-for-whitespace", 
            "text": "Looks at the 'tech' elements inside an nfc 'tech-list' definition and verifies that they do not containi whitespace. The loader for tech-list elements is very strict and will cause a runtime exception when this tech-list is used. See https://code.google.com/p/android/issues/detail?id=65351", 
            "title": "Check NFC Tech-List for whitespace"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#check-public-android-resource-usage", 
            "text": "Inspects Android resource usages and ensure that the resource referenced has been declared as public.", 
            "title": "Check Public Android Resource Usage"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#check-reference-type", 
            "text": "Verifies that an attribute that expects a resource reference is provided a reference expression (@type/value) rather than a literal value.", 
            "title": "Check Reference Type"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#circular-resource-usage", 
            "text": "Detects when a resource usage (@type/value) that points to a file based resource (such as a layout or drawable) will generate a circular reference when it is inflated. A common example of this is using  include  or  merge  tags inside a layout that also references other layouts via merging or including.", 
            "title": "Circular Resource Usage"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#class-reference-exists", 
            "text": "Checks that a DotNet class referenced in xml exists in the current solution and its references.  Available Fixes   Correct Unknown Class Reference : Replaces an invalid class reference with one that is closely named.", 
            "title": "Class Reference Exists"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#declarative-id-in-style", 
            "text": "Defining a style which sets android:id to a dynamically generated id can cause many versions of aapt, the resource packaging tool, to crash. To work around this, declare the id explicitly with  item type=\"id\" name=\"...\" /  instead.", 
            "title": "Declarative ID In Style"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#detect-duplicate-plurals-entries", 
            "text": "Inspects a 'plurals' resource entry for 'item' elements that have the same 'quantity' value.", 
            "title": "Detect Duplicate Plurals Entries"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#detect-resource-self-reference", 
            "text": "Analyses resources usages to detect when a usage attempts to reference itself. This error is most likely to occur when using animations, drawables and particularly for layout includes.", 
            "title": "Detect Resource Self Reference"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#drawable-9-patch-reference-check", 
            "text": "Checks that a drawable reference does not end with '.9'.  Available Fixes   Fix 9-patch drawable references : Replaces a nine patch drawable reference that includes the '.9' suffix with a reference that excludes the '.9' suffix.", 
            "title": "Drawable 9-patch reference check."
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#inconsistent-array-sizes", 
            "text": "Checks that 'array', 'string-array' and 'integer-array' resources with multiple declarations all have the same number of elements across all locales they are declared in.", 
            "title": "Inconsistent Array Sizes"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#item-value-resource-is-valid", 
            "text": "Checks that the content contained within an   tag that declares a value resource declaration is a valid format for its type.", 
            "title": "Item Value Resource Is Valid"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#layout-exists-in-configuration", 
            "text": "Checks that usages of 'include' tags within a Android layout reference a layout that is available within the current configuration.", 
            "title": "Layout  exists in configuration"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#layout-width-and-height-required", 
            "text": "Checks that layout elements have both the 'android:layout_width' and 'android:layout_height' attributes declared. Elements that are missing these attributes will generate a runtime exception when the layout is inflated.", 
            "title": "Layout Width And Height Required"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#mispelt-resource-type-references", 
            "text": "Checks that the resource references (EG: @string/myString) have a valid resource type component and suggests an auto-correction if possible.  Available Fixes   Fix Mispelt Resource Usages : Replaces unresolvable resource usages with an auto-suggested value based on the resources available in the project or its references.", 
            "title": "Mispelt Resource Type References"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#multiple-usages-in-manifest", 
            "text": "Inspects the   element within the Android manifest for multiple declarations of the   element. Only a single   element is allowed.", 
            "title": "Multiple  usages in manifest"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#node-missing-required-attributes", 
            "text": "Checks that a given resource node has all the mandatory attributes.  Available Fixes   Add Required Attributes : Adds any missing required attributes and their default values to an xml node.", 
            "title": "Node Missing Required Attributes"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#resource-value-format", 
            "text": "Validates that a resource value (such as a dimension, color or percentage) is entered in the correct format.  Available Fixes   Fix Value Format : Fixes typeos for inline values such as dimensions, color or floats.", 
            "title": "Resource Value Format"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#scroll-view-has-multiple-children", 
            "text": "Verifies that a ScrollView only has 1 direct child; multiple children will cause a runtime exception when the layout is inflated. If you want more children, encapsulate the child elements into a layout container.", 
            "title": "Scroll View Has Multiple Children"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#textview-textsize-uses-non-sp-dimension", 
            "text": "Inspects 'textSize' attributes for usages of non-sp dimensions", 
            "title": "TextView 'textSize' uses non-sp dimension"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#valid-keyword-input", 
            "text": "Validates that a keyword or sequence of flags provided to an xml attribute are valid. For instance, the installation location is doen by the 'android:installLocation' manifest attribute. This attribute only accepts 'internalOnly', 'auto' and 'preferExternal', any other value is a compilation error.  Available Fixes   Fix Keywords : Replaces a mispelt keyword with an auto-corrected suggestion or suggests from a list of valid keywords.", 
            "title": "Valid Keyword Input"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#validate-animated-vectors-reference-vector-drawables", 
            "text": "Verifies that the 'android:drawable' attribute on an 'animated-vector' drawable resource points to a 'vector' base drawable.", 
            "title": "Validate Animated Vectors Reference Vector Drawables"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#validate-flag-input", 
            "text": "Validates that any flags provided to an xml attribute are valid.  Available Fixes   Fix Flags : Replaces a mispelt flag with an auto-corrected suggestion or suggests from a list of valid keywords.", 
            "title": "Validate Flag Input"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#validate-quotations-in-elements", 
            "text": "Verifies that quotation marks (' and \") are properly escaped when inside a string resource. For instance, single quotes (') must be escaped by a preceeding '\\' unless the whole string is wrapped within double quotes (\"). Furthermore, the use of double quotes must be escaped unless they enclose the entire string.", 
            "title": "Validate quotations in  elements."
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#values-resource-is-valid", 
            "text": "Checks that the content contained within a value resource declaration is a valid format for its type.", 
            "title": "Values Resource Is Valid"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#verify-input-type", 
            "text": "Checks that a xml attribute accepts the resource type used in a reference expression (EG: @string/myString).", 
            "title": "Verify Input Type"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#verify-max-api-feature-usages", 
            "text": "Checks that xml resources use Android SDK features that are within the projects Target API level.", 
            "title": "Verify Max API Feature Usages"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/analysers/#verify-resource-exists", 
            "text": "Checks that a resource used via a reference expression (EG: @string/myString) exists within the project or its references.", 
            "title": "Verify Resource Exists"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/refactorings/", 
            "text": "WORK IN PROGRESS", 
            "title": "Refactorings"
        }, 
        {
            "location": "/xamarin-android/tools-in-depth/intellisense/", 
            "text": "WORK IN PROGRESS", 
            "title": "IntelliSense"
        }, 
        {
            "location": "/tutorials/tutorials/", 
            "text": "Tutorials\n\n\nRead these tutorials to learn a feature in-depth\n\n\nIntroduction\n\n\nThis document lists all the tutorials for MFractor.\n\n\nEach of the tutorials is an in-depth exploration of a feature from first concepts to practical use cases.\n\n\nXamarin.Forms Tutorials\n\n\nMFractor for Xamarin.Forms has the following tutorials:\n\n\n\n\nMvvm Navigation\n: Teaches you to use the Mvvm navigation shortcuts.\n\n\nImplementing ViewModels\n: Learn to generate properties from binding expression and implement entire view models.\n\n\nValue Converter Type Safety\n: Provide type-safety to \nConverter\n expressions by annotating \nIValueConverter\ns with a value conversion attribute.\n\n\n\n\nXamarin.Android Tutorials:\n\n\nMFractor for Xamarin.Android has the following tutorials:\n\n\n\n\nResource Expressions And Code Navigation\n: A deep dive into how MFractor handles resource expressions in both C# and Xml.", 
            "title": "Tutorials"
        }, 
        {
            "location": "/tutorials/tutorials/#tutorials", 
            "text": "Read these tutorials to learn a feature in-depth", 
            "title": "Tutorials"
        }, 
        {
            "location": "/tutorials/tutorials/#introduction", 
            "text": "This document lists all the tutorials for MFractor.  Each of the tutorials is an in-depth exploration of a feature from first concepts to practical use cases.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/tutorials/#xamarinforms-tutorials", 
            "text": "MFractor for Xamarin.Forms has the following tutorials:   Mvvm Navigation : Teaches you to use the Mvvm navigation shortcuts.  Implementing ViewModels : Learn to generate properties from binding expression and implement entire view models.  Value Converter Type Safety : Provide type-safety to  Converter  expressions by annotating  IValueConverter s with a value conversion attribute.", 
            "title": "Xamarin.Forms Tutorials"
        }, 
        {
            "location": "/tutorials/tutorials/#xamarinandroid-tutorials", 
            "text": "MFractor for Xamarin.Android has the following tutorials:   Resource Expressions And Code Navigation : A deep dive into how MFractor handles resource expressions in both C# and Xml.", 
            "title": "Xamarin.Android Tutorials:"
        }, 
        {
            "location": "/tutorials/xamarin-android/resource-expressions-and-code-navigation/", 
            "text": "Resource Expressions And Code Navigation\n\n\nLearn the C# and xml expressions that activate tooltips and go-to declaration in MFractor for Android\n\n\nOverview\n\n\nIf you\u2019re a Xamarin.Android developer building apps using the native APIs then chances are you spend a lot of time navigating resource code.\n\n\nThis becomes tedious when you are constantly doing manual searches for your target, browsing through the find results and then clicking the search result to jump to it. What\u2019s more, using go-to declaration on a C# resource symbol takes you to its integer id! It\u2019s tremendously frustrating and a massive time-waster.\n\n\nAnd this problem gets worse the bigger your project is; large Android applications can have dozens to hundreds of xml resources that need to be scanned each time a search takes place.\n\n\nMFractor addresses these navigation issues by overriding the default \u201cgo to declaration\u201d keyboard shortcuts when you are in the context of a resource expression.\n\n\nThese expressions come in 2 flavours:\n\n\n\n\nC#: Code expressions within C# that access the generated Resources class contained in the Resources.Designer.cs file. For instance; Resource.Layout.myLayout.\n\n\nXML: Code expressions within Android xml resources that point to another resource. For instance; @layout/myLayout.\n\n\n\n\nWhen MFractor detects the cursor is within one of these expressions, resource tooltips and go-to-declaration become active. This enables fast and efficient code navigation.\n\n\nThat is much faster than manual searching! Now lets go over each of these expression types.\n\n\nC# Resource Expressions\n\n\nFor C#, resource expressions are always resolved against the Resource.Designer.cs file that is generated alongside a project. This section assumes a basic familiarity of the Resource.Designer.cs file; if this is a new concept I suggested reading the \nAndroid Resource Basics\n page in Xamarins documentation.\n\n\nThe components of a supported resource expression are formatted like so:\n\n\n[Project Namespace].[Resource].[ResourceType].[ResourceName]\n\n\n\n\nWhere:\n\n\n\n\n[Project Namespace] is the project namespace that the Resources designer class resides. This component is either:\n\n\nImplicit: The encapsulating namespace is the same as the resource designers namespace or a using statement provides the resource designer class.\n\n\nExplicit: The expression explicitly uses the namespace that owns the resource class.\n\n\nResource is the constant Resource class that wraps the declarations of the ResourceType sub-classes.\n\n\nResourceType is the nested resource type class.\n\n\nResourceName is the name of the resource being referenced. MFractor will only trigger its behaviour when your caret or mouse cursor is over this component of the c# resource expression.\n\n\n\n\nAn example of a valid expression would be:\n\n\nResources.String.my_string;\n\n\n\n\nWhen your cursor is over the my_string component of this expression, MFractor will attempt to resolve a string resource named my_string.\n\n\nXml Resource Expressions\n\n\nXml resource expressions come in 3 different categories:\n\n\n\n\nReference expressions point directly to a resource. They begin with the \u2018@\u2019 character.\n\n\nDeclarative expressions declare a new resource. These are only used with ids. They begin with a \u2018@+\u2019 character sequence.\n\n\nTheme expression point to a component of the currently scoped theme. They begin with a \u2018?\u2019 character.\n\n\n\n\nReference and declarative expression are structured with the following syntax:\n\n\n@[+][PackageName:]resourceType/resourceName\n\n\n\n\nWhere:\n\n\n\n\n@[+] is the resource reference symbol.\n\n\nPackageName is an optional component that points to the package the resource is within.\n\n\nresourceType is the resource type.\n\n\nresourceName is the name of the resource.\n\n\n\n\nAn example of this would be:\n\n\n@string/my_string\n\n\n\n\nWhen your cursor is any component of this expression, MFractor will attempt to resolve a pre-existing string resource named my_string.\n\n\nLastly, theme resource expressions point to a component of the current theme. These are structured with the following syntax:\n\n\n?[PackageName:][ResourceType/]themeItemName\n\n\n\n\nWhere:\n\n\n\n\nPackageName is the optional package name the theme component resides within.\n\n\nResourceType is the optional resource type of the theme component. This is typically inferred.\n\n\nthemeItemName the name of the theme item.", 
            "title": "Resource Expressions And Code Navigation"
        }, 
        {
            "location": "/tutorials/xamarin-android/resource-expressions-and-code-navigation/#resource-expressions-and-code-navigation", 
            "text": "Learn the C# and xml expressions that activate tooltips and go-to declaration in MFractor for Android", 
            "title": "Resource Expressions And Code Navigation"
        }, 
        {
            "location": "/tutorials/xamarin-android/resource-expressions-and-code-navigation/#overview", 
            "text": "If you\u2019re a Xamarin.Android developer building apps using the native APIs then chances are you spend a lot of time navigating resource code.  This becomes tedious when you are constantly doing manual searches for your target, browsing through the find results and then clicking the search result to jump to it. What\u2019s more, using go-to declaration on a C# resource symbol takes you to its integer id! It\u2019s tremendously frustrating and a massive time-waster.  And this problem gets worse the bigger your project is; large Android applications can have dozens to hundreds of xml resources that need to be scanned each time a search takes place.  MFractor addresses these navigation issues by overriding the default \u201cgo to declaration\u201d keyboard shortcuts when you are in the context of a resource expression.  These expressions come in 2 flavours:   C#: Code expressions within C# that access the generated Resources class contained in the Resources.Designer.cs file. For instance; Resource.Layout.myLayout.  XML: Code expressions within Android xml resources that point to another resource. For instance; @layout/myLayout.   When MFractor detects the cursor is within one of these expressions, resource tooltips and go-to-declaration become active. This enables fast and efficient code navigation.  That is much faster than manual searching! Now lets go over each of these expression types.", 
            "title": "Overview"
        }, 
        {
            "location": "/tutorials/xamarin-android/resource-expressions-and-code-navigation/#c-resource-expressions", 
            "text": "For C#, resource expressions are always resolved against the Resource.Designer.cs file that is generated alongside a project. This section assumes a basic familiarity of the Resource.Designer.cs file; if this is a new concept I suggested reading the  Android Resource Basics  page in Xamarins documentation.  The components of a supported resource expression are formatted like so:  [Project Namespace].[Resource].[ResourceType].[ResourceName]  Where:   [Project Namespace] is the project namespace that the Resources designer class resides. This component is either:  Implicit: The encapsulating namespace is the same as the resource designers namespace or a using statement provides the resource designer class.  Explicit: The expression explicitly uses the namespace that owns the resource class.  Resource is the constant Resource class that wraps the declarations of the ResourceType sub-classes.  ResourceType is the nested resource type class.  ResourceName is the name of the resource being referenced. MFractor will only trigger its behaviour when your caret or mouse cursor is over this component of the c# resource expression.   An example of a valid expression would be:  Resources.String.my_string;  When your cursor is over the my_string component of this expression, MFractor will attempt to resolve a string resource named my_string.", 
            "title": "C# Resource Expressions"
        }, 
        {
            "location": "/tutorials/xamarin-android/resource-expressions-and-code-navigation/#xml-resource-expressions", 
            "text": "Xml resource expressions come in 3 different categories:   Reference expressions point directly to a resource. They begin with the \u2018@\u2019 character.  Declarative expressions declare a new resource. These are only used with ids. They begin with a \u2018@+\u2019 character sequence.  Theme expression point to a component of the currently scoped theme. They begin with a \u2018?\u2019 character.   Reference and declarative expression are structured with the following syntax:  @[+][PackageName:]resourceType/resourceName  Where:   @[+] is the resource reference symbol.  PackageName is an optional component that points to the package the resource is within.  resourceType is the resource type.  resourceName is the name of the resource.   An example of this would be:  @string/my_string  When your cursor is any component of this expression, MFractor will attempt to resolve a pre-existing string resource named my_string.  Lastly, theme resource expressions point to a component of the current theme. These are structured with the following syntax:  ?[PackageName:][ResourceType/]themeItemName  Where:   PackageName is the optional package name the theme component resides within.  ResourceType is the optional resource type of the theme component. This is typically inferred.  themeItemName the name of the theme item.", 
            "title": "Xml Resource Expressions"
        }, 
        {
            "location": "/tutorials/xamarin-forms/mvvm-navigation/", 
            "text": "Mvvm Navigation\n\n\nQuickly move between Xamarin.Forms Views, View Models and Code behind classes using Mvvm navigation shortcuts\n\n\nOverview\n\n\nXamarin.Forms is cross platform toolkit that allows developers to build iOS, Android and Windows apps and maximise code reuse across platforms. Xamarin.Forms also facilitates shared UI code through the use of an xml based view markup langauge named Xaml.\n\n\nDevelopers build their UI views in Xaml and Xamarin.Forms then inflate the view into it\u2019s native implementation.\n\n\nAlongside shared UI code, Xamarin.Forms uses the Model \u2013 View \u2013 View Model (Mvvm) design pattern to seperate a UI definition it\u2019s from state/behaviour code.\n\n\nThe Mvvm design pattern is a great for maintainabilty and code clarity however developers can spend a lot of time manually nagivating between Xaml views and an associated view model.\n\n\nMFractor adds several navigation shortcuts to speed up developers.\n\n\nGetting Started\nIn this article we will use MFractor to navigate between a Xaml UI definition, it\u2019s code behind class and its associated view model.\n\n\nWe assume the following:\n\n\n\n\nA Xamarin Studio 6.0 installation.\n\n\nMFractor 2 installed into Xamarin Studio. Install it here: www.mfractor.com/download\n\n\nA familarity with the Xamarin.Forms; particularly building UIs with Xaml and the Model \u2013 View \u2013 View Model design pattern.\n\n\nThe MFractor For Xamarin.Forms sample project downloaded and open in Xamarin Studio.\n\n\n\n\nViews, Code Behind classes and ViewModels\n\n\nLet\u2019s start by examining the MFractor For Xamarin.Forms sample project. Open it up in Xamarin Studio and take a look at the project structure:\n\n\nMFractor For Xamarin.Forms Project\n\n\nThe project itself is trivial; it has a single xaml page with a code behind class and 2 view view models; WelcomeViewModel and GoodbyeViewModel. Notice that this project appends Xaml views with with \u201cPage\u201d and view models with \u201cViewModel\u201d.\n\n\nBefore we get started learning how to use the Mvvm navigation shortcuts, let\u2019s understand the conventions that MFractor uses to drive the navigation.\n\n\nThe \u201cPage/View\" and \"ViewModel\" naming convention\n\n\nIn Xamarin.Forms, the de-facto naming convention is to append views with Page or View and view models are appended with ViewModel.\n\n\nThis naming standard implies that the WelcomePage and the WelcomeViewModel are associated; if we stripped off Page and ViewModel from the file names then both would be named Welcome. This implicit relationship makes the codebase easier to understand by conforming to industry standards.\n\n\nMFractor notices this implicit relationship; if a view and a view model within the same assembly are named like this, a MFractor activates shortcuts between the view, it\u2019s code behind and the associated view model.\n\n\nIf developers don\u2019t want this implicit relationship or their Views/View Models are in seperate assemblies, they may explicitly specify the binding context in the view\u2019s Xaml using the View Model Locator pattern.\n\n\nThe ViewModelLocator Pattern\n\n\nThe ViewModelLocator pattern is a static class used to specify the BindingContext of a Xaml view for design time previewing. James Montemagno re-introduced this concept in his blog post for the Xaml Previewer.\n\n\nDevelopers implement a static class named ViewModelLocator that exposes a static instance of their view models:\n\n\npublic static class ViewModelLocator\n{\n    static MyViewModel _myViewModel;\n    public static MyViewModel MyViewModel =\n _myViewModel ?? (_myViewModel = new MyViewModel());\n}\n\n\n\n\nThis static instance is then bound to the Xaml\u2019s binding context via an x:Static expression:\n\n\n    xmlns:design=\nclr-namespace:MyAppNamespace;assembly=MyApp\n\n    BindingContext=\n{x:Static design:ViewModelLocator.MyViewModel}\n\n\n\n\n\nWhen the BindingContext for a view is explicitly defined, MFractor will honor this relationship and route all Mvvm navigation to the view model class declaration defined by the ViewModelLocator.\n\n\nFor the sample project, we could retarget the WecomePage to link with the GoodbyeViewModel by exposing a static instance through the ViewModelLocator and referencing it using the BindingContext:\n\n\nC#\n\n\npublic static class ViewModelLocator\n{\n    static GoodbyeViewModel _goodebye;\n    public static GoodbyeViewModel GoodbyeViewModel =\n _goodebye ?? (_goodebye = new GoodbyeViewModel());\n}\n\n\n\n\nXaml\n\n\n    xmlns:design=\nclr-namespace:MFractorForForms;assembly=MFractorForForms\n\n    BindingContext=\n{x:Static design:ViewModelLocator.GoodbyeViewModel}\n\n\n\n\n\nFluid Mvvm Navigation\n\n\nNow that we understand how MFractor links the Mvvm code files, let\u2019s get to know the Mvvm navigation shortcuts.\n\n\nOpen up the WelcomePage.xaml and right click in the middle of the editor:\n\n\nMvvm Shortcuts\n\n\nThere are 3 Mvvm navigation shortcuts in MFractor:\n\n\n\n\nGo To Code-Behind Class: Jumps you to the code behind class related to a view or view model\n\n\nGo To View Model: Jumps you to the view model related to a view or code behind class.\n\n\nGo To Xaml View: Jumps you to the xaml view related to a view model or code behind class.\n\n\n\n\nWe can use these short-cuts to quickly navigate around these 3 files:\n\n\nOr we can use an xStatic expression that uses the ViewModelLocator to target a different view model implementation:\n\n\nCustom Binding Context\n\n\nNow the Go To View Model shortcut will instead jump to the class type used by the BindingContext rather than the implicit association.\n\n\nSummary\n\n\nWe\u2019ve learnt how to use MFractors Mvvm navigation shortcuts to quickly move between the View, Code Behind Class and View Model\n\n\nTo continue learning to use MFractor, visit our documentation page.", 
            "title": "Mvvm Navigation"
        }, 
        {
            "location": "/tutorials/xamarin-forms/mvvm-navigation/#mvvm-navigation", 
            "text": "Quickly move between Xamarin.Forms Views, View Models and Code behind classes using Mvvm navigation shortcuts", 
            "title": "Mvvm Navigation"
        }, 
        {
            "location": "/tutorials/xamarin-forms/mvvm-navigation/#overview", 
            "text": "Xamarin.Forms is cross platform toolkit that allows developers to build iOS, Android and Windows apps and maximise code reuse across platforms. Xamarin.Forms also facilitates shared UI code through the use of an xml based view markup langauge named Xaml.  Developers build their UI views in Xaml and Xamarin.Forms then inflate the view into it\u2019s native implementation.  Alongside shared UI code, Xamarin.Forms uses the Model \u2013 View \u2013 View Model (Mvvm) design pattern to seperate a UI definition it\u2019s from state/behaviour code.  The Mvvm design pattern is a great for maintainabilty and code clarity however developers can spend a lot of time manually nagivating between Xaml views and an associated view model.  MFractor adds several navigation shortcuts to speed up developers.  Getting Started\nIn this article we will use MFractor to navigate between a Xaml UI definition, it\u2019s code behind class and its associated view model.  We assume the following:   A Xamarin Studio 6.0 installation.  MFractor 2 installed into Xamarin Studio. Install it here: www.mfractor.com/download  A familarity with the Xamarin.Forms; particularly building UIs with Xaml and the Model \u2013 View \u2013 View Model design pattern.  The MFractor For Xamarin.Forms sample project downloaded and open in Xamarin Studio.", 
            "title": "Overview"
        }, 
        {
            "location": "/tutorials/xamarin-forms/mvvm-navigation/#views-code-behind-classes-and-viewmodels", 
            "text": "Let\u2019s start by examining the MFractor For Xamarin.Forms sample project. Open it up in Xamarin Studio and take a look at the project structure:  MFractor For Xamarin.Forms Project  The project itself is trivial; it has a single xaml page with a code behind class and 2 view view models; WelcomeViewModel and GoodbyeViewModel. Notice that this project appends Xaml views with with \u201cPage\u201d and view models with \u201cViewModel\u201d.  Before we get started learning how to use the Mvvm navigation shortcuts, let\u2019s understand the conventions that MFractor uses to drive the navigation.", 
            "title": "Views, Code Behind classes and ViewModels"
        }, 
        {
            "location": "/tutorials/xamarin-forms/mvvm-navigation/#the-pageview-and-viewmodel-naming-convention", 
            "text": "In Xamarin.Forms, the de-facto naming convention is to append views with Page or View and view models are appended with ViewModel.  This naming standard implies that the WelcomePage and the WelcomeViewModel are associated; if we stripped off Page and ViewModel from the file names then both would be named Welcome. This implicit relationship makes the codebase easier to understand by conforming to industry standards.  MFractor notices this implicit relationship; if a view and a view model within the same assembly are named like this, a MFractor activates shortcuts between the view, it\u2019s code behind and the associated view model.  If developers don\u2019t want this implicit relationship or their Views/View Models are in seperate assemblies, they may explicitly specify the binding context in the view\u2019s Xaml using the View Model Locator pattern.", 
            "title": "The \u201cPage/View\" and \"ViewModel\" naming convention"
        }, 
        {
            "location": "/tutorials/xamarin-forms/mvvm-navigation/#the-viewmodellocator-pattern", 
            "text": "The ViewModelLocator pattern is a static class used to specify the BindingContext of a Xaml view for design time previewing. James Montemagno re-introduced this concept in his blog post for the Xaml Previewer.  Developers implement a static class named ViewModelLocator that exposes a static instance of their view models:  public static class ViewModelLocator\n{\n    static MyViewModel _myViewModel;\n    public static MyViewModel MyViewModel =  _myViewModel ?? (_myViewModel = new MyViewModel());\n}  This static instance is then bound to the Xaml\u2019s binding context via an x:Static expression:      xmlns:design= clr-namespace:MyAppNamespace;assembly=MyApp \n    BindingContext= {x:Static design:ViewModelLocator.MyViewModel}   When the BindingContext for a view is explicitly defined, MFractor will honor this relationship and route all Mvvm navigation to the view model class declaration defined by the ViewModelLocator.  For the sample project, we could retarget the WecomePage to link with the GoodbyeViewModel by exposing a static instance through the ViewModelLocator and referencing it using the BindingContext:  C#  public static class ViewModelLocator\n{\n    static GoodbyeViewModel _goodebye;\n    public static GoodbyeViewModel GoodbyeViewModel =  _goodebye ?? (_goodebye = new GoodbyeViewModel());\n}  Xaml      xmlns:design= clr-namespace:MFractorForForms;assembly=MFractorForForms \n    BindingContext= {x:Static design:ViewModelLocator.GoodbyeViewModel}", 
            "title": "The ViewModelLocator Pattern"
        }, 
        {
            "location": "/tutorials/xamarin-forms/mvvm-navigation/#fluid-mvvm-navigation", 
            "text": "Now that we understand how MFractor links the Mvvm code files, let\u2019s get to know the Mvvm navigation shortcuts.  Open up the WelcomePage.xaml and right click in the middle of the editor:", 
            "title": "Fluid Mvvm Navigation"
        }, 
        {
            "location": "/tutorials/xamarin-forms/mvvm-navigation/#mvvm-shortcuts", 
            "text": "There are 3 Mvvm navigation shortcuts in MFractor:   Go To Code-Behind Class: Jumps you to the code behind class related to a view or view model  Go To View Model: Jumps you to the view model related to a view or code behind class.  Go To Xaml View: Jumps you to the xaml view related to a view model or code behind class.   We can use these short-cuts to quickly navigate around these 3 files:  Or we can use an xStatic expression that uses the ViewModelLocator to target a different view model implementation:", 
            "title": "Mvvm Shortcuts"
        }, 
        {
            "location": "/tutorials/xamarin-forms/mvvm-navigation/#custom-binding-context", 
            "text": "Now the Go To View Model shortcut will instead jump to the class type used by the BindingContext rather than the implicit association.", 
            "title": "Custom Binding Context"
        }, 
        {
            "location": "/tutorials/xamarin-forms/mvvm-navigation/#summary", 
            "text": "We\u2019ve learnt how to use MFractors Mvvm navigation shortcuts to quickly move between the View, Code Behind Class and View Model  To continue learning to use MFractor, visit our documentation page.", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/xamarin-forms/implementing-view-models/", 
            "text": "Implementing View Models\n\n\nGenerate properties and view models from Xaml to C# using code fixes and the Implement View Model refactoring\n\n\nIntroduction\n\n\nIn Xamarin.Forms apps, we design our applications using the Model - View - ViewModel design pattern; relying on binding mechanisms to mirror data back and forth between the view and view model.\n\n\nWe accomplish this data-transfer behaviour through the \nBinding Markup Extension\n. This is a Xamarin.Forms API that implements the \nIMarkupExtension interface\n; it reflects changes from the binding context to the view and vice-versa.\n\n\nWe use the binding markup extension syntax in our Xaml views:\n\n\nLoginPage.xaml.cs\n\n\nEntry Text=\n{Binding Username}\n/\n\n\n\n\n\nLoginViewModel.cs\n\n\npublic class LoginViewModel\n{\n  public string Username { get; set; }\n}\n\n\n\n\nIn the above example, \n{Binding Username}\n points to a public property on the \nLogingPage\ns binding context, the \nLoginViewModel\n. When the user enters text, changes are automatically applied into the \nUsername\n property.\n\n\nBut what if we introduced a new \nEntry\n bound to \nPassword\n, a property that doesn't exist on the \nLoginViewModel\n:\n\n\nLoginPage.xaml.cs\n\n\nEntry Text=\n{Binding Username}\n/\n\n\nEntry Text=\n{Binding Password}\n/\n\n\n\n\n\nProvided we have configured the views binding context correctly, the \nXaml analyser\n recognises this is a runtime bug and marks it:\n\n\n\n\nMFractor encourages a \nXaml first\n workflow; you write out bindings in Xaml and then generate the implementation on the view model.\n\n\nThis is a big change to existing workflows. Previously, we coded these properties by hand and wire them up manually in the Xaml; an approach both time-consuming and error prone. You have to remember property names, property types, control types and then you need to write this all out by hand!\n\n\nUsing binding generation we can \nliterally\n eliminate minutes of work and hundreds of keystrokes in a few clicks.\n\n\nMFractor provides the following shortcuts to implement our bound properties:\n\n\n\n\nFix Missing Binding\n: A code issue fix that generates a single binding property onto the view model.\n\n\nImplement View Model\n: A refactoring action that collects \nall\n missing bindings and generates them in bulk on the view model.\n\n\n\n\nLet's examine these two methods of implementing missing properties using MFractor.\n\n\nIssue Fixing on Missing Bindings\n\n\nWhen MFractor detects that a property in a binding expression doesn't exist on the binding context, it adds a code issue at the missing bindings location.\n\n\nTo action the code isxue fix, we right click on the issue (underlined in yellow), navigate to \nFix\n and then select \nGenerate a property...\n.\n\n\n\n\nWe have two options available when generating a property:\n\n\nGenerate a property named XXX in XXX\n creates a new public property with a public \nget\n and \nset\n accessor:\n\n\npublic string Password { get; set; }\n\n\n\n\nGenerate a property named XXX in XXX with backing fields\n creates a new public property with a public \nget\n and \nset\n accessor that sets or gets a backing field:\n\n\nprivate string _password;\npublic string Password\n{\n  get\n  {\n    return _password;\n  }\n  set\n  {\n    _password = value;\n  }\n}\n\n\n\n\nThe default getter / setter fix is most useful when:\n\n\n\n\nWe want a plain old property with no backing logic.\n\n\nWe are using Fody's \nImplementPropertyChanged\n attribute on our ViewModel to automatically add INotifyPropertyChanged behaviour.\n\n\n\n\nThe backing field fix is most useful when:\n\n\n\n\nWe want backing logic that occurs when our property changes.\n\n\nWe occasionally want to manipulate the properties backing field without changes propagating to the UI.\n\n\n\n\nThe Implement ViewModel Refactoring\n\n\nAnother way to generate properties for a view model is to use the \nImplement View Model\n refactoring. This shortcut collects \nall\n missing binding expressions (excluding bindings inside DataTemplates) and generates them in bulk onto the binding context.\n\n\nWe can access this short cut by right clicking anywhere in a Xaml file, navigating to \nRefactor\n and then selecting the \nImplement View Model\n action:\n\n\n\n\nYou'll notice that there are 2 actions:\n\n\n\n\nGenerate a property named XXX in XXX\n gathers all missing bindings in the xaml document and implements them all as public properties with a public \nget\n and \nset\n accessor.\n\n\nGenerate a property named XXX in XXX with backing fields\n gathers all missing bindings in the xaml document and implements them all as public properties with a public \nget\n and \nset\n accessor that sets or gets a backing field.\n\n\n\n\nThere are often cases when a binding context isn't specified \nexplicitly \n and can't be inferred \nimplicitly\n. A common example of this is that you have just started to build a Xaml view and haven't yet got around to building the corresponding view model.\n\n\nThe \nImplement View Model\n action can also generate a view model class for the Xaml view if one is not already defined. Using Mvvm naming conventions, MFractor generates a view model class for your xaml view under the \nMyDefaultNamespace.ViewModels\n namespace.\n\n\nFor example:\n\n\nLoginPage.xaml.cs\n\n\nEntry Text=\n{Binding Username}\n/\n\n\nEntry Text=\n{Binding Password}\n/\n\n\n\n\n\nWhen creating the view model class, MFractor removes the \nPage\n or \nView\n suffix from the view name and then attaches \nViewModel\n to the end of the resulting name.\n\n\n\n\n\n\n\n\nRemove the \nPage\n or \nView\n suffix: LoginPage -\n Login\n\n\n\n\n\n\n\n\n\n\nAttach the \nViewModel\n suffix: Login -\n LoginViewModel\n\n\n\n\n\n\n\n\n\n\nGenerate a new class named \nLoginViewModel\n under the namespace \nMyDefaultNamespace.ViewModels\n.\n\n\n\n\n\n\n\n\nThis would result in the following view model class file:\n\n\nLoginViewModel.cs\n\n\npublic namespace MyDefaultNamespace.ViewModels\n{\n  public class LoginViewModel\n  {\n    public string Username { get; set; }\n    public string Password { get; set; }\n  }\n}\n\n\n\n\nIf you project references Fody's \nImplementPropertyChanged\n extension, the default getter / setter implementation will also annotate the result with the \n[ImplementPropertyChanged.PropertyChanged]\n attribute:\n\n\nLoginViewModel.cs\n\n\n[ImplementPropertyChanged.PropertyChanged]\npublic class LoginViewModel\n{\n}\n\n\n\n\nGenerating Commands Implementations\n\n\nWhen MFractor encounters a property that expects the \nSystem.Windows.Input.ICommand\n interface, it will generate a property returning a empty command implementation.\n\n\nFor example, we bind our login button to a \nLoginCommand\n property on our view model:\n\n\nButton Command=\n{Binding LoginCommand}\n/\n\n\n\n\n\nWhen MFractor generates the property for \nLoginCommand\n, it creates an empty command implementation:\n\n\npublic System.Windows.Input.ICommand LoginCommand\n{\n    get\n    {\n        return new Xamarin.Forms.Command(() =\n\n        {\n            throw new NotImplementedException();\n        }\n\n        );\n    }\n}\n\n\n\n\nBinding Generation And Value Converters\n\n\nWhen a binding expression uses a \nConverter\n, MFractor will attempt to resolve the input type of the referenced value converter and use that as the property type. We must have a value conversion attribute on the \nIValueConverter\n for MFractor to resolve the input type. Please read the \nValue Conversion Type-Safety\n tutorial to learn more.\n\n\nFor example, we add a login button that is only enabled when the user has their password entered:\n\n\nResourceDictionary\n\n    \nlocal:StringToBoolConverter x:Key=\nstringToBoolConverter\n /\n\n\n/ResourceDictionary\n\n\n\nButton IsEnabled=\n{Binding Password, Converter={StaticResource stringToBoolConverter}}\n/\n\n\n\n\n\nProvided that \nstringToBoolConverter\n is annotated to accept string inputs and return a boolean output, MFractor can still generate \nPassword\n as a string even though \nIsEnabled\n is a boolean property.\n\n\nIf there is no value conversion information on the value converter, MFractor will default to \nSysten.Object\n as the type for our property:\n\n\npublic System.Object Password\n{\n  get; set;\n}\n\n\n\n\nLimitations\n\n\nThere are a some limitations in the \nImplement View Model\n refactoring:\n\n\n\n\nWhen a Xaml view has an item that uses a \nDataTemplate\n to declare an inline view, MFractor \nwill not\n gather the bindings inside the data template. A refactoring action to generate bindings for data templates will be coming in a future MFractor release.\n\n\n\n\nSummary\n\n\nBy building our apps using the \nXaml first\n mindset, we can leverage MFractor's binding generation to implement our view models quickly.\n\n\nIn this tutorial we learnt:\n\n\n\n\nWe can generate entire view models using the \nImplement View Model\n refactoring action.\n\n\nWe can generate single properties using code issue fixing.\n\n\nWe need a binding context to activate binding expression analysis and issue fixing.\n\n\nWhen a binding uses a value converter, MFractor use the correct type when the converter has a value conversion attribute.", 
            "title": "Implementing View Models"
        }, 
        {
            "location": "/tutorials/xamarin-forms/implementing-view-models/#implementing-view-models", 
            "text": "Generate properties and view models from Xaml to C# using code fixes and the Implement View Model refactoring", 
            "title": "Implementing View Models"
        }, 
        {
            "location": "/tutorials/xamarin-forms/implementing-view-models/#introduction", 
            "text": "In Xamarin.Forms apps, we design our applications using the Model - View - ViewModel design pattern; relying on binding mechanisms to mirror data back and forth between the view and view model.  We accomplish this data-transfer behaviour through the  Binding Markup Extension . This is a Xamarin.Forms API that implements the  IMarkupExtension interface ; it reflects changes from the binding context to the view and vice-versa.  We use the binding markup extension syntax in our Xaml views:  LoginPage.xaml.cs  Entry Text= {Binding Username} /   LoginViewModel.cs  public class LoginViewModel\n{\n  public string Username { get; set; }\n}  In the above example,  {Binding Username}  points to a public property on the  LogingPage s binding context, the  LoginViewModel . When the user enters text, changes are automatically applied into the  Username  property.  But what if we introduced a new  Entry  bound to  Password , a property that doesn't exist on the  LoginViewModel :  LoginPage.xaml.cs  Entry Text= {Binding Username} /  Entry Text= {Binding Password} /   Provided we have configured the views binding context correctly, the  Xaml analyser  recognises this is a runtime bug and marks it:   MFractor encourages a  Xaml first  workflow; you write out bindings in Xaml and then generate the implementation on the view model.  This is a big change to existing workflows. Previously, we coded these properties by hand and wire them up manually in the Xaml; an approach both time-consuming and error prone. You have to remember property names, property types, control types and then you need to write this all out by hand!  Using binding generation we can  literally  eliminate minutes of work and hundreds of keystrokes in a few clicks.  MFractor provides the following shortcuts to implement our bound properties:   Fix Missing Binding : A code issue fix that generates a single binding property onto the view model.  Implement View Model : A refactoring action that collects  all  missing bindings and generates them in bulk on the view model.   Let's examine these two methods of implementing missing properties using MFractor.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/xamarin-forms/implementing-view-models/#issue-fixing-on-missing-bindings", 
            "text": "When MFractor detects that a property in a binding expression doesn't exist on the binding context, it adds a code issue at the missing bindings location.  To action the code isxue fix, we right click on the issue (underlined in yellow), navigate to  Fix  and then select  Generate a property... .   We have two options available when generating a property:  Generate a property named XXX in XXX  creates a new public property with a public  get  and  set  accessor:  public string Password { get; set; }  Generate a property named XXX in XXX with backing fields  creates a new public property with a public  get  and  set  accessor that sets or gets a backing field:  private string _password;\npublic string Password\n{\n  get\n  {\n    return _password;\n  }\n  set\n  {\n    _password = value;\n  }\n}  The default getter / setter fix is most useful when:   We want a plain old property with no backing logic.  We are using Fody's  ImplementPropertyChanged  attribute on our ViewModel to automatically add INotifyPropertyChanged behaviour.   The backing field fix is most useful when:   We want backing logic that occurs when our property changes.  We occasionally want to manipulate the properties backing field without changes propagating to the UI.", 
            "title": "Issue Fixing on Missing Bindings"
        }, 
        {
            "location": "/tutorials/xamarin-forms/implementing-view-models/#the-implement-viewmodel-refactoring", 
            "text": "Another way to generate properties for a view model is to use the  Implement View Model  refactoring. This shortcut collects  all  missing binding expressions (excluding bindings inside DataTemplates) and generates them in bulk onto the binding context.  We can access this short cut by right clicking anywhere in a Xaml file, navigating to  Refactor  and then selecting the  Implement View Model  action:   You'll notice that there are 2 actions:   Generate a property named XXX in XXX  gathers all missing bindings in the xaml document and implements them all as public properties with a public  get  and  set  accessor.  Generate a property named XXX in XXX with backing fields  gathers all missing bindings in the xaml document and implements them all as public properties with a public  get  and  set  accessor that sets or gets a backing field.   There are often cases when a binding context isn't specified  explicitly   and can't be inferred  implicitly . A common example of this is that you have just started to build a Xaml view and haven't yet got around to building the corresponding view model.  The  Implement View Model  action can also generate a view model class for the Xaml view if one is not already defined. Using Mvvm naming conventions, MFractor generates a view model class for your xaml view under the  MyDefaultNamespace.ViewModels  namespace.  For example:  LoginPage.xaml.cs  Entry Text= {Binding Username} /  Entry Text= {Binding Password} /   When creating the view model class, MFractor removes the  Page  or  View  suffix from the view name and then attaches  ViewModel  to the end of the resulting name.     Remove the  Page  or  View  suffix: LoginPage -  Login      Attach the  ViewModel  suffix: Login -  LoginViewModel      Generate a new class named  LoginViewModel  under the namespace  MyDefaultNamespace.ViewModels .     This would result in the following view model class file:  LoginViewModel.cs  public namespace MyDefaultNamespace.ViewModels\n{\n  public class LoginViewModel\n  {\n    public string Username { get; set; }\n    public string Password { get; set; }\n  }\n}  If you project references Fody's  ImplementPropertyChanged  extension, the default getter / setter implementation will also annotate the result with the  [ImplementPropertyChanged.PropertyChanged]  attribute:  LoginViewModel.cs  [ImplementPropertyChanged.PropertyChanged]\npublic class LoginViewModel\n{\n}", 
            "title": "The Implement ViewModel Refactoring"
        }, 
        {
            "location": "/tutorials/xamarin-forms/implementing-view-models/#generating-commands-implementations", 
            "text": "When MFractor encounters a property that expects the  System.Windows.Input.ICommand  interface, it will generate a property returning a empty command implementation.  For example, we bind our login button to a  LoginCommand  property on our view model:  Button Command= {Binding LoginCommand} /   When MFractor generates the property for  LoginCommand , it creates an empty command implementation:  public System.Windows.Input.ICommand LoginCommand\n{\n    get\n    {\n        return new Xamarin.Forms.Command(() = \n        {\n            throw new NotImplementedException();\n        }\n\n        );\n    }\n}", 
            "title": "Generating Commands Implementations"
        }, 
        {
            "location": "/tutorials/xamarin-forms/implementing-view-models/#binding-generation-and-value-converters", 
            "text": "When a binding expression uses a  Converter , MFractor will attempt to resolve the input type of the referenced value converter and use that as the property type. We must have a value conversion attribute on the  IValueConverter  for MFractor to resolve the input type. Please read the  Value Conversion Type-Safety  tutorial to learn more.  For example, we add a login button that is only enabled when the user has their password entered:  ResourceDictionary \n     local:StringToBoolConverter x:Key= stringToBoolConverter  /  /ResourceDictionary  Button IsEnabled= {Binding Password, Converter={StaticResource stringToBoolConverter}} /   Provided that  stringToBoolConverter  is annotated to accept string inputs and return a boolean output, MFractor can still generate  Password  as a string even though  IsEnabled  is a boolean property.  If there is no value conversion information on the value converter, MFractor will default to  Systen.Object  as the type for our property:  public System.Object Password\n{\n  get; set;\n}", 
            "title": "Binding Generation And Value Converters"
        }, 
        {
            "location": "/tutorials/xamarin-forms/implementing-view-models/#limitations", 
            "text": "There are a some limitations in the  Implement View Model  refactoring:   When a Xaml view has an item that uses a  DataTemplate  to declare an inline view, MFractor  will not  gather the bindings inside the data template. A refactoring action to generate bindings for data templates will be coming in a future MFractor release.", 
            "title": "Limitations"
        }, 
        {
            "location": "/tutorials/xamarin-forms/implementing-view-models/#summary", 
            "text": "By building our apps using the  Xaml first  mindset, we can leverage MFractor's binding generation to implement our view models quickly.  In this tutorial we learnt:   We can generate entire view models using the  Implement View Model  refactoring action.  We can generate single properties using code issue fixing.  We need a binding context to activate binding expression analysis and issue fixing.  When a binding uses a value converter, MFractor use the correct type when the converter has a value conversion attribute.", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/xamarin-forms/value-converter-type-safety/", 
            "text": "Value Converter Type Safety\n\n\nProvide Xaml type-safety by annotating IValueConverter's with the ValueConversion attribute\n\n\nIntroduction\n\n\nIn Xamarin.Forms developers data bind properties in a control to properties on a binding context using the \nBinding\n markup extension.\n\n\nTypically, the type on the control's property matches the type on the binding context property. But what if we had a screen with an email entry that needs to change color when the user enters a valid email?\n\n\nEnter the \nIValueConverter interface\n; value converters implement\n\n\nWe can expose a boolean \nIsEmailValid\n on our binding context, bind the \nTextColor\n field of the entry to the \nIsEmailValid\n property and use an \nIValueConverter\n that converts a \nTrue\n value to black and a \nFalse\n value to red.\n\n\nOur converter would look like this:\n\n\npublic class BoolToTextColorConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        return (bool)value ? Color.Black : Color.Red;\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        throw new NotImplementedException();\n    }\n}\n\n\n\n\nAnd when used in our xaml:\n\n\nLoginPage.xaml\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nContentPage\n        xmlns=\nhttp://xamarin.com/schemas/2014/forms\n\n        xmlns:x=\nhttp://schemas.microsoft.com/winfx/2009/xaml\n\n        x:Class=\nMyApp.LoginPage\n\n        xmlns:converters=\nclr-namespace:MyApp.Converters;assembly=MyApp\n\n    \nContentPage.Resources\n\n        \nResourceDictionary\n\n            \nconverters:BoolToTextColorConverter x:Key=\nboolToTextColorConverter\n /\n\n        \n/ResourceDictionary\n\n    \n/ContentPage.Resources\n\n    \nEntry TextColor=\n{Binding IsEmailValid, Converter={StaticResource boolToTextColorConverter}}\n/\n\n\n/ContentPage\n\n\n\n\n\nNow when the user enters an invalid email, the value converter will translate the \nIsEmailValid\n boolean property in a \nXamarin.Forms.Color\n!\n\n\nBut what if we accidentally provided a \nstring\n to the \nBoolToTextColorConverter\n:\n\n\nEntry TextColor=\n{Binding Email, Converter={StaticResource boolToTextColorConverter}}\n/\n\n\n\n\n\nThis creates a runtime bug we won't discover until we build, deploy and navigate to the \nLoginPage\n; we'll see a type cast exception without a clear indication of the problem.\n\n\nWe can completely avoid this problem by declaring a value converters intent with an \nValueConversionAttribute\n to hint to MFractor's Xaml analyser it's expected behaviour.\n\n\nThe ValueConversion Attribute\n\n\nIn WPF, Microsoft provides the \nValueConversionAttribute\n that developers can use to describe the input, output and parameter type that an \nIValueConverter\n expects. This class level annotation declares the intent of a value converter to tools and to other developers using a converter.\n\n\nUnfortunately this attribute is in the \nPresentationFramework\n assembly, which we can't reference in a Xamarin.Forms PCL or shared project.\n\n\nAs the \nValueConversionAttribute\n is simple in implementation, we can easily make our own:\n\n\n[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]\npublic class ValueConversionAttribute : Attribute\n{\n  public ValueConversionAttribute(Type input, Type output)\n  {\n  }\n\n  public Type ParameterType { get; set; }\n}\n\n\n\n\nLet's examine this attribute in detail:\n\n\n\n\nThe constructor \nValueConversionAttribute(Type input, Type output)\n declares the expected input and output types for a converter.\n\n\nType input\n is the expected \ninput\n type for the value converter. This is the argument \nobject value\n for the \nConvert\n method and the return type for the \nConvertBack\n method.\n\n\nType output\n is the expected \noutput\n type for the value converter. This is the return type for the \nConvert\n method and the argument \nobject value\n for the \nConvertBack\n method.\n\n\nThe property \nType ParameterType\n is the expected \nparamter\n type for the value converter. This is the argument \nobject parameter\n for the \nConvert\n and \nConvertBack\n methods.\n\n\n\n\nTo use the \nValueConversionAttribute\n in our source code, we annotate a value converter at the class level and use the \ntypeof\n operator to provide input, output and parameter types:\n\n\n[ValueConversion(typeof(bool), typeof(Xamarin.Forms.Color))]\npublic class BoolToTextColorConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        return (bool)value ? Color.Black : Color.Red;\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        throw new NotImplementedException();\n    }\n}\n\n\n\n\nThe \nBoolToTextColorConverter\n now declares it's intent when converting values to both tooling and other developers; it \nmust\n have a \nbool\n as an input and it \nmust\n return into a \nXamarin.Forms.Color\n type.\n\n\nTo include the \nValueConversionAttribute\n we can simply copy-paste the code into our code base. Alternatively, add a third party library like \nFormsCommunityToolkit.Converters\n that has the \nValueConversionAttribute\n defined.\n\n\nConverter Type-Safety in Xaml\n\n\nWhen an \nIValueConverter\n is annotated with the \nValueConversion\n attribute, we declare to MFractor that our value converter wishes to enforce \ntype safety\n.\n\n\nThis has a few benefits:\n\n\n\n\nMFractor can now verify the types passed into and returned by a \nConverter\n expression are correct in the given context.\n\n\nWhen MFractor is generating a property from a binding expression, it can now extract the type information for a converter and generate that property with the correct type information.\n\n\n\n\nLet's consider our previous example of a provided a string as the input to the \nBoolToTextColorConverter\n:\n\n\nEntry TextColor=\n{Binding Email, Converter={StaticResource boolToTextColorConverter}}\n/\n\n\n\n\n\nWhen analysing the \nBinding\n expression, MFractor will inspect for \nConverter\n expressions and then evaluate the inner converter for it's expected input and output type.\n\n\nAs we have provided a \nstring\n but \nBoolToTextColorConverter\n expects a \nbool\n, MFractor will mark this as an error within the Xaml editor:\n\n\n\n\nVoila! We now have type-safety in our Xaml when using value converters! \u2728\u2728\n\n\nAnnotated value converters also allow the refactoring engine to correctly generate properties.\n\n\nFor example, if the our binding context is missing the \nEmail\n property, MFractor will extract the input type from the value converter and use that to generate the binding property:\n\n\n\n\nInstead of using the type of the \nTextColor\n property, MFractor could see that \nBoolToTextColorConverter\n expected a \nbool\n value and then generated the \nEmail\n property with a \nbool\n.\n\n\nSummary\n\n\nIn this tutorial we learnt:\n\n\n\n\nWe can annotate implementations of \nIValueConverter\n with a \nValueConversionAttribute\n to declare it's value conversion intent.\n\n\nAnnotated value converters enable MFractor's Xaml analyser to provide type-safety in the Xaml editor.\n\n\nAnnotated value converters enable MFractor's refactoring engine to generate properties with the correct type information.", 
            "title": "Value Converter Type Safety"
        }, 
        {
            "location": "/tutorials/xamarin-forms/value-converter-type-safety/#value-converter-type-safety", 
            "text": "Provide Xaml type-safety by annotating IValueConverter's with the ValueConversion attribute", 
            "title": "Value Converter Type Safety"
        }, 
        {
            "location": "/tutorials/xamarin-forms/value-converter-type-safety/#introduction", 
            "text": "In Xamarin.Forms developers data bind properties in a control to properties on a binding context using the  Binding  markup extension.  Typically, the type on the control's property matches the type on the binding context property. But what if we had a screen with an email entry that needs to change color when the user enters a valid email?  Enter the  IValueConverter interface ; value converters implement  We can expose a boolean  IsEmailValid  on our binding context, bind the  TextColor  field of the entry to the  IsEmailValid  property and use an  IValueConverter  that converts a  True  value to black and a  False  value to red.  Our converter would look like this:  public class BoolToTextColorConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        return (bool)value ? Color.Black : Color.Red;\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        throw new NotImplementedException();\n    }\n}  And when used in our xaml:  LoginPage.xaml  ?xml version= 1.0  encoding= UTF-8 ?  ContentPage\n        xmlns= http://xamarin.com/schemas/2014/forms \n        xmlns:x= http://schemas.microsoft.com/winfx/2009/xaml \n        x:Class= MyApp.LoginPage \n        xmlns:converters= clr-namespace:MyApp.Converters;assembly=MyApp \n     ContentPage.Resources \n         ResourceDictionary \n             converters:BoolToTextColorConverter x:Key= boolToTextColorConverter  / \n         /ResourceDictionary \n     /ContentPage.Resources \n     Entry TextColor= {Binding IsEmailValid, Converter={StaticResource boolToTextColorConverter}} /  /ContentPage   Now when the user enters an invalid email, the value converter will translate the  IsEmailValid  boolean property in a  Xamarin.Forms.Color !  But what if we accidentally provided a  string  to the  BoolToTextColorConverter :  Entry TextColor= {Binding Email, Converter={StaticResource boolToTextColorConverter}} /   This creates a runtime bug we won't discover until we build, deploy and navigate to the  LoginPage ; we'll see a type cast exception without a clear indication of the problem.  We can completely avoid this problem by declaring a value converters intent with an  ValueConversionAttribute  to hint to MFractor's Xaml analyser it's expected behaviour.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/xamarin-forms/value-converter-type-safety/#the-valueconversion-attribute", 
            "text": "In WPF, Microsoft provides the  ValueConversionAttribute  that developers can use to describe the input, output and parameter type that an  IValueConverter  expects. This class level annotation declares the intent of a value converter to tools and to other developers using a converter.  Unfortunately this attribute is in the  PresentationFramework  assembly, which we can't reference in a Xamarin.Forms PCL or shared project.  As the  ValueConversionAttribute  is simple in implementation, we can easily make our own:  [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]\npublic class ValueConversionAttribute : Attribute\n{\n  public ValueConversionAttribute(Type input, Type output)\n  {\n  }\n\n  public Type ParameterType { get; set; }\n}  Let's examine this attribute in detail:   The constructor  ValueConversionAttribute(Type input, Type output)  declares the expected input and output types for a converter.  Type input  is the expected  input  type for the value converter. This is the argument  object value  for the  Convert  method and the return type for the  ConvertBack  method.  Type output  is the expected  output  type for the value converter. This is the return type for the  Convert  method and the argument  object value  for the  ConvertBack  method.  The property  Type ParameterType  is the expected  paramter  type for the value converter. This is the argument  object parameter  for the  Convert  and  ConvertBack  methods.   To use the  ValueConversionAttribute  in our source code, we annotate a value converter at the class level and use the  typeof  operator to provide input, output and parameter types:  [ValueConversion(typeof(bool), typeof(Xamarin.Forms.Color))]\npublic class BoolToTextColorConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        return (bool)value ? Color.Black : Color.Red;\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        throw new NotImplementedException();\n    }\n}  The  BoolToTextColorConverter  now declares it's intent when converting values to both tooling and other developers; it  must  have a  bool  as an input and it  must  return into a  Xamarin.Forms.Color  type.  To include the  ValueConversionAttribute  we can simply copy-paste the code into our code base. Alternatively, add a third party library like  FormsCommunityToolkit.Converters  that has the  ValueConversionAttribute  defined.", 
            "title": "The ValueConversion Attribute"
        }, 
        {
            "location": "/tutorials/xamarin-forms/value-converter-type-safety/#converter-type-safety-in-xaml", 
            "text": "When an  IValueConverter  is annotated with the  ValueConversion  attribute, we declare to MFractor that our value converter wishes to enforce  type safety .  This has a few benefits:   MFractor can now verify the types passed into and returned by a  Converter  expression are correct in the given context.  When MFractor is generating a property from a binding expression, it can now extract the type information for a converter and generate that property with the correct type information.   Let's consider our previous example of a provided a string as the input to the  BoolToTextColorConverter :  Entry TextColor= {Binding Email, Converter={StaticResource boolToTextColorConverter}} /   When analysing the  Binding  expression, MFractor will inspect for  Converter  expressions and then evaluate the inner converter for it's expected input and output type.  As we have provided a  string  but  BoolToTextColorConverter  expects a  bool , MFractor will mark this as an error within the Xaml editor:   Voila! We now have type-safety in our Xaml when using value converters! \u2728\u2728  Annotated value converters also allow the refactoring engine to correctly generate properties.  For example, if the our binding context is missing the  Email  property, MFractor will extract the input type from the value converter and use that to generate the binding property:   Instead of using the type of the  TextColor  property, MFractor could see that  BoolToTextColorConverter  expected a  bool  value and then generated the  Email  property with a  bool .", 
            "title": "Converter Type-Safety in Xaml"
        }, 
        {
            "location": "/tutorials/xamarin-forms/value-converter-type-safety/#summary", 
            "text": "In this tutorial we learnt:   We can annotate implementations of  IValueConverter  with a  ValueConversionAttribute  to declare it's value conversion intent.  Annotated value converters enable MFractor's Xaml analyser to provide type-safety in the Xaml editor.  Annotated value converters enable MFractor's refactoring engine to generate properties with the correct type information.", 
            "title": "Summary"
        }, 
        {
            "location": "/release-notes/v2-7/", 
            "text": "Release Notes - v2.7.0\n\n\n8th January 2017\n\n\nDownload MFractor 2.7.0\n\n\nIntroduction\n\n\nThis is a summary of the changes introduced in v2.7.0 of MFractor for Xamarin Studio.\n\n\nThis release adds the ability implement entire view models, introduces a dozen xaml analysers and fixes many bugs.\n\n\nI recommend taking a moment to read these tutorials:\n\n\n\n\nImplementing View Models\n: Learn implement entire view models using the \nImplement View Model\n refactoring.\n\n\nValue Converter Type Safety\n: Learn to annotate \nIValueConverter\ns with value conversion attributes for \nConverter\n expression type-safety.\n\n\n\n\nIntroducing View Model Generation\n\n\nYou already love being able to generate bindings but I've taken it to the next level this release \ud83d\udcaa\n\n\n\n\nGot a heap of unimplemented bindings? Right click anywhere in your Xaml document and select \nRefactor\n -\n \nImplement View Model\n.\n\n\nMFractor will collect all the missing bindings and then generate a new class with \nall\n of those properties into a namespace named \nMyDefaultNamespace.ViewModels\n.\n\n\nDoes the view model already exist? Then MFractor simply inserts the missing bindings into the existing view model.\n\n\nI think it'll save you enough time during the week that you may just get to Friday beers a few hours early \ud83c\udf7b\n\n\nFeatures\n\n\n\n\nBy right clicking anywhere in a Xaml document, implement all missing bindings as a new or into an existing view model:\n\n\nImplement view model properties with a getter and setter.\n\n\nImplement view model properties with a backing field.\n\n\nBound properties that return \nICommand\n will have an empty \nXamarin.Forms.Command\n instance generated.\n\n\nWhen MFractor encounters binding expressions that use a \nConverter\n, it inspects the converter for a \nValueConversion\n attribute to deduce the input typed required. If it can't resolve the converter or the converter does not have value conversion information, it will default to using \nSystem.Object\n.\n\n\nWhen implementing a new view model with getter and setters, MFractor will inspect for references to Fody's \nImplementPropertyChanged\n and annotate the new class with it.\n\n\n\n\n\n\nNew Xaml Analysers:\n\n\nValidate that elements declared inside a resource dictionary have an x:Key.\n\n\nValidate that elements declared inside a resource dictionary have a unique x:Key value.\n\n\nDetect when an x:TypeArguments is used on a non-generic type and warn of incorrect usage.\n\n\nDetect when a property setter node (\nMyClass.MyProperty/\n) references a non-existent member on the parent class.\n\n\nDetect when a property setter attribute is empty.\n\n\nDetect when an undefined static resource is referenced by a \nStaticResource\n expression.\n\n\nDetect when the value returned by a \nStaticResource\n expression causes a type mismatch.\n\n\nDetect when an unknown type is being provided to a \nx:TypeArguments\n attribute.\n\n\nValidate that \nOnIdiom\n elements return the correct type for the outer property setter.\n\n\nValidate that \nOnPlatform\n elements return the correct type for the outer property setter.\n\n\nDetect when a developer has misused a property setter inside another xaml element. For example, \nOnIdiom.Phone\n doesn't make any sense when wrapped by the outer element \nOnPlatform\n.\n\n\nDetect when an incorrect input type is provided to a \nConverter\n. The value converter must have a \nValueConversion\n attribute for this to trigger.\n\n\nDetect when an incorrect output type is returned by a \nConverter\n expression. The value converter must have a \nValueConversion\n attribute for this to trigger.\n\n\nDetect when multiple occurrences of the same automation ID exists within a Xaml document.\n\n\n\n\n\n\nNew Xaml Fixes:\n\n\nGenerate missing resource dictionary keys.\n\n\nAuto-correct misspelt \nStaticResource\n references.\n\n\n\n\n\n\nNew Simplify Refactorings:\n\n\nAttributes that use a static instance to initialize the property (eg \nVerticalOptions=\"LayoutOptions.CentreAndExpand\"\n) can now be simplified to just the instance name (eg \nVerticalOptions=\"CentreAndExpand\"\n).\n\n\n\n\n\n\n\n\nEnhancements\n\n\n\n\nThis release targets Xamarin Studio v6.1.3\n\n\nThe \nAbout MFractor\n dialog now contains a button to copy version and IDE information into the clipboard for bug reports. See \nSupport - Filing A Bug Report\n for more information on filing a bug report.\n\n\nThis release introduces the framework for an Xml and Xaml refactoring engine. Over time, I'll be adding Xml and Xaml refactoring operations to make code cleanup a breeze.\n\n\nAnnotating value converters with a \nValueConversion(typeof(InputType), typeof(OutputType))\n attribute will trigger the conversion information to render into tooltip. See \nFormsCommunityToolkit.Converters\n for examples.\n\n\n\n\nBug Fixes\n\n\n\n\nSometimes the Xaml document analyser would fail to load and bring down the Xaml editor. This has been fixed.\n\n\nThe View \n - \n Code Behind navigation shortcuts would break when an AST parse was in progress. View \n - \n Code Behind shortcuts will now always be active.\n\n\nWhen property setter nodes are used (\nMyClass.MyProperty/\n), the class component is now correctly validated.\n\n\nWhen importing a Xaml namespace, the element is inserted on a newline and formatted to align with other attributes.\n\n\nWhen resolving the binding context for nested DataTemplates, sometimes the binding context resolver would fail on generics or IEnumerables\n\n\nMore resilient Mvvm resolver to drive the 'Go To View Model', 'Go To Xaml View' and 'Go To Code Behind' shortcuts. MFractor will attempt to infer as best possible the associations between those 3 files.\n\n\nSave the project after adding a new file to it.", 
            "title": 2.7
        }, 
        {
            "location": "/release-notes/v2-7/#release-notes-v270", 
            "text": "8th January 2017  Download MFractor 2.7.0", 
            "title": "Release Notes - v2.7.0"
        }, 
        {
            "location": "/release-notes/v2-7/#introduction", 
            "text": "This is a summary of the changes introduced in v2.7.0 of MFractor for Xamarin Studio.  This release adds the ability implement entire view models, introduces a dozen xaml analysers and fixes many bugs.  I recommend taking a moment to read these tutorials:   Implementing View Models : Learn implement entire view models using the  Implement View Model  refactoring.  Value Converter Type Safety : Learn to annotate  IValueConverter s with value conversion attributes for  Converter  expression type-safety.", 
            "title": "Introduction"
        }, 
        {
            "location": "/release-notes/v2-7/#introducing-view-model-generation", 
            "text": "You already love being able to generate bindings but I've taken it to the next level this release \ud83d\udcaa   Got a heap of unimplemented bindings? Right click anywhere in your Xaml document and select  Refactor  -   Implement View Model .  MFractor will collect all the missing bindings and then generate a new class with  all  of those properties into a namespace named  MyDefaultNamespace.ViewModels .  Does the view model already exist? Then MFractor simply inserts the missing bindings into the existing view model.  I think it'll save you enough time during the week that you may just get to Friday beers a few hours early \ud83c\udf7b", 
            "title": "Introducing View Model Generation"
        }, 
        {
            "location": "/release-notes/v2-7/#features", 
            "text": "By right clicking anywhere in a Xaml document, implement all missing bindings as a new or into an existing view model:  Implement view model properties with a getter and setter.  Implement view model properties with a backing field.  Bound properties that return  ICommand  will have an empty  Xamarin.Forms.Command  instance generated.  When MFractor encounters binding expressions that use a  Converter , it inspects the converter for a  ValueConversion  attribute to deduce the input typed required. If it can't resolve the converter or the converter does not have value conversion information, it will default to using  System.Object .  When implementing a new view model with getter and setters, MFractor will inspect for references to Fody's  ImplementPropertyChanged  and annotate the new class with it.    New Xaml Analysers:  Validate that elements declared inside a resource dictionary have an x:Key.  Validate that elements declared inside a resource dictionary have a unique x:Key value.  Detect when an x:TypeArguments is used on a non-generic type and warn of incorrect usage.  Detect when a property setter node ( MyClass.MyProperty/ ) references a non-existent member on the parent class.  Detect when a property setter attribute is empty.  Detect when an undefined static resource is referenced by a  StaticResource  expression.  Detect when the value returned by a  StaticResource  expression causes a type mismatch.  Detect when an unknown type is being provided to a  x:TypeArguments  attribute.  Validate that  OnIdiom  elements return the correct type for the outer property setter.  Validate that  OnPlatform  elements return the correct type for the outer property setter.  Detect when a developer has misused a property setter inside another xaml element. For example,  OnIdiom.Phone  doesn't make any sense when wrapped by the outer element  OnPlatform .  Detect when an incorrect input type is provided to a  Converter . The value converter must have a  ValueConversion  attribute for this to trigger.  Detect when an incorrect output type is returned by a  Converter  expression. The value converter must have a  ValueConversion  attribute for this to trigger.  Detect when multiple occurrences of the same automation ID exists within a Xaml document.    New Xaml Fixes:  Generate missing resource dictionary keys.  Auto-correct misspelt  StaticResource  references.    New Simplify Refactorings:  Attributes that use a static instance to initialize the property (eg  VerticalOptions=\"LayoutOptions.CentreAndExpand\" ) can now be simplified to just the instance name (eg  VerticalOptions=\"CentreAndExpand\" ).", 
            "title": "Features"
        }, 
        {
            "location": "/release-notes/v2-7/#enhancements", 
            "text": "This release targets Xamarin Studio v6.1.3  The  About MFractor  dialog now contains a button to copy version and IDE information into the clipboard for bug reports. See  Support - Filing A Bug Report  for more information on filing a bug report.  This release introduces the framework for an Xml and Xaml refactoring engine. Over time, I'll be adding Xml and Xaml refactoring operations to make code cleanup a breeze.  Annotating value converters with a  ValueConversion(typeof(InputType), typeof(OutputType))  attribute will trigger the conversion information to render into tooltip. See  FormsCommunityToolkit.Converters  for examples.", 
            "title": "Enhancements"
        }, 
        {
            "location": "/release-notes/v2-7/#bug-fixes", 
            "text": "Sometimes the Xaml document analyser would fail to load and bring down the Xaml editor. This has been fixed.  The View   -   Code Behind navigation shortcuts would break when an AST parse was in progress. View   -   Code Behind shortcuts will now always be active.  When property setter nodes are used ( MyClass.MyProperty/ ), the class component is now correctly validated.  When importing a Xaml namespace, the element is inserted on a newline and formatted to align with other attributes.  When resolving the binding context for nested DataTemplates, sometimes the binding context resolver would fail on generics or IEnumerables  More resilient Mvvm resolver to drive the 'Go To View Model', 'Go To Xaml View' and 'Go To Code Behind' shortcuts. MFractor will attempt to infer as best possible the associations between those 3 files.  Save the project after adding a new file to it.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/v2-6/", 
            "text": "Release Notes - v2.6.0\n\n\n31st October 2016\n\n\nDownload MFractor 2.6.0\n\n\nIntroduction\n\n\nThis is a summary of the changes introduced in v2.6.0 of MFractor for Xamarin Studio.\n\n\nAs a major release, this release adds several code generation capabilities to improve your Xaml workflow. Generate views, classes and value converters in only a few clicks...\n\n\nJust right click on that little yellow squiggle and use the fix to generate a whole lotta code.\n\n\nThere are also more xaml code checks to watch out for nasty Xaml issues and bug fixes galore.\n\n\nEnjoy!\n\n\nFeatures\n\n\n\n\nNew code generation actions:\n\n\nGenerate classes from \nmy_namespace:MyMissingClass\n in xaml.\n\n\nGenerate views from \nmy_namespace:MyMissingView\n in xaml.\n\n\nGenerate value converters when a missing xaml node ends with \"[cC]onverter] in xaml.\n\n\n\n\n\n\nNew Xaml analysers:\n\n\nFor generics, validate that an x:TypeArguments attribute or xml node setter exists.\n\n\nFor generics, validate that the count of parameters provided to x:TypeArguments matches the generics signature.\n\n\nValidate the root xaml node contains an x:Class directive to set the code behind class name and namespace.\n\n\n\n\n\n\n\n\nEnhancements\n\n\n\n\nThis release targets Xamarin Studio v6.1.1\n\n\n\n\nBug Fixes\n\n\n\n\nFix a bug in xaml namespace resolution that prevented the \"import new xmlns\" fix from triggering.\n\n\nAllow importing of xaml namespaces from x:Static symbols.\n\n\nFor Setters, don't validate TargetType property that the provided type is a static member of System.Type.\n\n\nWhen a symbol name matches but its in the wrong namespace, don't suggest it as a fix.\n\n\nRemove the MFractor settings panel to fix the Xamarin Studio preferences dialog from not opening when it didn't exist.\n\n\nWhen using native view declaration, the xaml symbolicator will now honor the targetPlatform flag and find the assembly for that platform. Previously this was a naive search that used the first assembly found; using the wrong symbols if a assembly of the same name existed in both an iOS and Android project.", 
            "title": 2.6
        }, 
        {
            "location": "/release-notes/v2-6/#release-notes-v260", 
            "text": "31st October 2016  Download MFractor 2.6.0", 
            "title": "Release Notes - v2.6.0"
        }, 
        {
            "location": "/release-notes/v2-6/#introduction", 
            "text": "This is a summary of the changes introduced in v2.6.0 of MFractor for Xamarin Studio.  As a major release, this release adds several code generation capabilities to improve your Xaml workflow. Generate views, classes and value converters in only a few clicks...  Just right click on that little yellow squiggle and use the fix to generate a whole lotta code.  There are also more xaml code checks to watch out for nasty Xaml issues and bug fixes galore.  Enjoy!", 
            "title": "Introduction"
        }, 
        {
            "location": "/release-notes/v2-6/#features", 
            "text": "New code generation actions:  Generate classes from  my_namespace:MyMissingClass  in xaml.  Generate views from  my_namespace:MyMissingView  in xaml.  Generate value converters when a missing xaml node ends with \"[cC]onverter] in xaml.    New Xaml analysers:  For generics, validate that an x:TypeArguments attribute or xml node setter exists.  For generics, validate that the count of parameters provided to x:TypeArguments matches the generics signature.  Validate the root xaml node contains an x:Class directive to set the code behind class name and namespace.", 
            "title": "Features"
        }, 
        {
            "location": "/release-notes/v2-6/#enhancements", 
            "text": "This release targets Xamarin Studio v6.1.1", 
            "title": "Enhancements"
        }, 
        {
            "location": "/release-notes/v2-6/#bug-fixes", 
            "text": "Fix a bug in xaml namespace resolution that prevented the \"import new xmlns\" fix from triggering.  Allow importing of xaml namespaces from x:Static symbols.  For Setters, don't validate TargetType property that the provided type is a static member of System.Type.  When a symbol name matches but its in the wrong namespace, don't suggest it as a fix.  Remove the MFractor settings panel to fix the Xamarin Studio preferences dialog from not opening when it didn't exist.  When using native view declaration, the xaml symbolicator will now honor the targetPlatform flag and find the assembly for that platform. Previously this was a naive search that used the first assembly found; using the wrong symbols if a assembly of the same name existed in both an iOS and Android project.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/v2-5/", 
            "text": "Release Notes - v2.5.3\n\n\n10th of October 2016\n\n\nDownload MFractor 2.5.0\n\n\nIntroduction\n\n\nThis is a summary of the changes introduced in v2.5.3 of MFractor for Xamarin Studio.\n\n\nThis release adds support for native view declaration and property generation for missing view attributes.\n\n\nFeatures\n\n\n\n\nGenerate properties and bindable properties onto classes that implement Xamarin.Forms.ObservableObject.\n\n\nFull support for native view declaration. Tooltips, go-to declaration, xaml analysis and code generation enabled on native views used in Xaml.\n\n\n\n\nBug Fixes\n\n\n\n\nXaml expressions now parsed on attributes that cannot be resolved to a .NET symbol. This enables Tooltips, go-to declaration, xaml analysis and code generation.\n\n\nThe analysis engine no longer assumes that the Xamarin.Forms and Microsoft schemas are the implicit and 'x' namespaces. This means that Xamarin.Forms could be remapped to xmlns:xf etc and the xaml analyser will still function correctly.", 
            "title": 2.5
        }, 
        {
            "location": "/release-notes/v2-5/#release-notes-v253", 
            "text": "10th of October 2016  Download MFractor 2.5.0", 
            "title": "Release Notes - v2.5.3"
        }, 
        {
            "location": "/release-notes/v2-5/#introduction", 
            "text": "This is a summary of the changes introduced in v2.5.3 of MFractor for Xamarin Studio.  This release adds support for native view declaration and property generation for missing view attributes.", 
            "title": "Introduction"
        }, 
        {
            "location": "/release-notes/v2-5/#features", 
            "text": "Generate properties and bindable properties onto classes that implement Xamarin.Forms.ObservableObject.  Full support for native view declaration. Tooltips, go-to declaration, xaml analysis and code generation enabled on native views used in Xaml.", 
            "title": "Features"
        }, 
        {
            "location": "/release-notes/v2-5/#bug-fixes", 
            "text": "Xaml expressions now parsed on attributes that cannot be resolved to a .NET symbol. This enables Tooltips, go-to declaration, xaml analysis and code generation.  The analysis engine no longer assumes that the Xamarin.Forms and Microsoft schemas are the implicit and 'x' namespaces. This means that Xamarin.Forms could be remapped to xmlns:xf etc and the xaml analyser will still function correctly.", 
            "title": "Bug Fixes"
        }
    ]
}